<File version="3.2">
  <FileID>89f6e73f-32cc-406d-b4bf-e11639642cb8</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFvoSURBVHhe7d0HcFx5gh72dUm6Ovskn225JLsk
lyzZ65NLtqxg66STrLqSpTvd7u3tzszOTtiZnRlyOIHDnEGCCEQmkRMBEIEgSILIRM45NUI3GjnH
7kYHJCIHhs///2uAg+GAMyRBoBvE95v6ho0O771+3ej/9xqvX/+EiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIXpHf7//+
75W99dZbZZ6e3mVubp5lVxiGYRiG2VNxc/cqc3J2LvvffvrTMjG2y/yw3/u932s8dfocKhs70TEy
xTAMwzDMHkzn6DTahy1IyyrAP/9n/wzrw/zz/fKXvyqraOiAqseIMvUAwzAMwzB7Mv0o1wyidXga
oddv/HgB8PK6Wtajf4DylkFUaocYhmEYhtnDaewxoaym6ccLgPy7f59hTrlRdevwdyPOq+oxoKpz
TJx+5jKGYRiG2cOpaRtRUrXFZS+S2nbr7WvEv68+jVFlGvLfrS5/kcj5y2ls/NzcZ0ZhWe2PFwB3
dy+lAFS1rt8RmS4dqrr0qOkYQ1NaDeob+1A5MoHqjcsZhmEYZg+nrmMUpWJsS8qpx73sOtyT/75w
6pCYVYu8qjZl4zi1oPF705DT3Sqbr5OYXYv7JRplee6XqJWfN1/n2dtuZPM05Hzl/Ctbhp6WCXW/
BUUvWgD6jfOiQYyJFTKGmt5xNBVp0JHXhKqJBbR734X+f3kbHQGpqNdPo1pcp07MRK68ug4dVN3j
IgbltjsSZV7r8xGlxDrfUdSKy+q7DJvO2+K2rxhluuv3q75zTFmp37uePK9Tp1wuT9fK9dep3/Sz
vFz/dN3In79dZt36/VqfFsMwDLOraewxiIGzCfmVrWIQH0Slpv8lMoBq8W9SrgqZZVrcL2xCbeuQ
9TJ1vzK9Ku0QyuXf5NdTqRlEjXyLXjltnYa8TXJuPbIr2pAiplUnfq4S58vLq1rEPOQ0mvuV8aJG
bNnL6ch/N26vTKNtGOmFjcipbEfD+njTMjiJovK6FysAA8YFMTjJwUyH2tEp9H1wBeZ/8znqhixo
EO3G9Af/Hyb/i/8bxmv30GiaQ60y8InBrmMYZXVaFNW1i/Pk4GedxmuNGOBr2wZQUqNBSUO3MoDK
8+UgWq7Sori+c33g3eK2LxzrQG09PYbyhlYU1Ypp17agQrQqWTK+dxsx/9pW+QANi5/F7eU7Ji3i
QWsdUS5TieWs1faKddMm1q24XLmOdZlLmweUy783TYZhGGZX0tRrRHqRWowhXcrr/Oad6crVg9/L
5svla3iNMvA2Iau8FbkVrcprv7ysUowJudVtCIq4i6i4FMTdyURMQgaCrt9GUl4tqtpGrdMQkRuG
GUXNyBK3v1+sVrbey8SAL+dXqOpGxM00RMQkIyQ2HSE3UhAZl4y4pAJlHvJ6pSJyvtllLWKeHWgU
G/DyvmmHpl60AHiWDZkXlQFJtod6/QyG/+QwLD/5Iwz9h2OoM8+j92gwzD/5p5j8G/8W/QGpqBuZ
FDMyo7ZZg9SMQmQWlCKnqh1NAxZlpTb2GMW/Jutp5edxMe1x5Tz588b51uuI88TlyvXWr6tcptzG
gKZ+E8prapCaWYL7+SUoahiAWsynsrYR9wuqUCiKQU2HEc3ijsvbymlvzPvpsvSt/yynrSzbxmXj
aO6zQNXei8KqFtTLZenWo7JRg7T0+0jJqRIPlk5c59vl3LgP6kELSiurkFPRjuaBCdS39SI9PRt5
Nd1imc1o6h5BQUmVssx54oFp6p9AbVMbsgrKxHJXorJV//Q+MgzDMLsbtXidzijRoFTVIzYyR5WN
uaoW+Tf5MTEQj4kt+JGnke+Qy+tUietsXK9eGbzVyBZb3nmVrWKDWC8uG1HePb6VVo6yshqYTRa0
tnZgeHgU/b39CItNQ4MYg+T15HQbxIZhphj4c6o6kFWqUQZvWUbkZSWNffALjsPoyBgyMguhbe1E
VXU9QqJTlI1KuQxV4rpyi18WkPyaTjSL8VLet7aRGRRXvGABGJlYVgbE5j4xKI7PYuTKLVEA/lgM
+v8CQz87C01tN/R/722YxM+G/+kdaMX1mkXDqFNrkFvehvrWdmQWqlDX1oec/HIUqTpRXteEnGIV
imsaxb+1qO0cFQO5Chm5JaK1DKKmSYvs/FJkFtWiXqywqvomZOZXokK0mdpmLTLzylCuGUbL8CQq
a+rFNAfEdVTIFm1LOzKNalUDMvJr0SAHcG0XSlS9YhDuEQ9mB8rEPLMLypFTLlaoWKa8okpRUsQD
IqanEisxK6/YelnHEPLlZXl5uHU3HaWaEWjEk6J1dBJllTUoaR6Furtf3KdSZBXXK8tZWdeA+znF
KG7qR4VYrrzqTmgGJ0QhMImfG1FY1w3N8DQaxYOeU6ERtx9EdqlKlIRJlFbVoFyrU5a9sKEPLQNm
ZZ0zDMMwuxvt8AQyS1tQ1tArBlG9MuirusaRVaZBeHQyosTWd/StDLEVn4rrsSkorO0SA7RBuV61
vK4YvOXf7/PE4J1f3Y4Gcdtacb7cA/9OZjUqK2sRceMOjl24hksu/lCLDeaohGyxQWpRrifTJMYU
OfDLwVtuxcs/S1TLMtI2okwnragJ7t5hWFtdRnd3Ly65hSj75sl37GvE9WTkgJ9X2aaMPdohi3Lf
OvWzogDUv1gBGJ1cEVvVZmhE1LoZtInByfS3/lwM+P9GlIB/iaG3HTHyoRvMf+2PMfH7/w79N/LQ
LEpDY1sbUlKzxRZtNao7h1GQX4Bk0VRyKxuQW1iGYtGsyqprxZ1rR52mVQzCdWLreRj55dXIK61S
VlppRQ0KapqRnpGN9Pwy5ImFzhJb9vW9FmWA1I5MoUalQnJqDrKK6lArVliL2PqW5ze0tIrzqlBU
VSem1YmGNtHEyhuQU1CqDPalFWIelfWiWIjBu60buWXVyCmsQkW7HhXVNcivEvPKr0GtKAXZhXVo
EqVGzrN1ZELcthpl6kGUlleiqFk0QDFo55bXiGUTpaNXhwJxfoFY1kJRjuSyaEcmUV3fjKL6HrTq
5qDuEPOr0oqyNCLKRoO4/IEoQLWobBtHXVOTKAD9aBVPQLnOGYZhmN1N++iU8vZ9eVOfMrDXtuvE
ODiJ8Jv3USle3y1mI8YNOkxaTMjKzMXNlBKxhT2hXK9GpKHLoBSIfFEMCuTb791G1Inz5QB/VxSA
tLRMNDU1i633PJSVVaKqsgrhcRnKPOT1ZJp7jKIAtKBADN7ZZVo0iw1xuc+b/LOyHNz9wxJQWlqO
jPu5KBfLdOduKqIT88Q4alauJyM33mUBKBYbwW1iHJL3rXt8HiVi7Fsf5p9PFgDd9BpahiZEexAR
W7MaywK6o/Nh+uv/TpSAP1GKwMT/9alSCsw/+T/R6xiLlvknaNSKLXUxqKuHH6BTN4niUrFFX9yA
+q4hFJdUoLxFB43YAs7KyRcDdLPYEheDqkorBk21WLhasYU/guo6FQqrNWIru1ishA6o2vvF9crF
nekSDciIdlFIquvqkCNWTuvojBg0J5U0ietVt/Qgp6gMRdUNyCupQ2FZBbIrxOBaWonCGvHAlIp5
NGrEFn8VSmvF1nmNVsxXFo5WFJWrUCYuyy1pFo1pCJnZJajtMaNNTLtd3JcysbJL1cNi3vXIFVvy
xZUqlDe3Ke8mlKrE7cX9KamuF9PqRtuYKE1j0+K6TShp7EdjRw/K61tRKAuCKBnFda2obGhHeZ0a
+eK8/DL5johJmZeyzhmGYZhdTacYW3Iq2lDR1C+2ouXfzvVo6rcgrVCFawE3EBaZgNCIW8q/voHR
yKtuE4OtWbme3O9M/glXDtpyy7tQvv3eJy8zKFvuhXVd8A2KwY24e4i7lYLY+GQxjRtIzq0VJcKi
XE9GLW6TXa5VNhxzRBlpGbAoyyL/1Cz/7BAQnoDwyFsIjEpGcORdhIbHIfpuDjSDk8r1ZDTiNrKA
yD8ZdIhxSN63XtOiGOtUP14A3EQB0M88FFu9U6I9fBvt/CP0xhTC9Hv/XhSAf/703QDTf/ef0VnV
iVbzArT9Oqg6xpQBsF0OzgN6Mcg1o0Ldh4YO60cRGlq7UFrfCY0yaPeguLoFTQOiZHSPKH+bVyv/
mqHuGhCXNYuB0YCW3mExuDahrmscHboHUPeMKHe0XQ60YtnkvFp6R1Ba04SKlmF0jE6iprkVJfVt
ohmNokiUgpyyBvEgiRXc2YX7WSUoaeiAenAabYN65QAJ1a2jaB0yieUfVaYpby//riJXYPvYFJo7
h8SDYEH7iAmV9WpxnwZEMZgV5/eJ5VQrf3poEfOSy9U2KqYrou4ZU+6TRiyv3KdCI+5TiapdlKtJ
qFoHxINmRk2TBlVi3hv3hWEYhtn9dBtmkSO2nGu1I+I1ekqMVxNKWganxEbsuNgCt27pV4t/VWLr
Xp6/cR35TkCreF2Xg3ZhXY8Y43qUcWnzNBpEEZC3ldOQ05Lj0eZpyHSI2+SJElIktt4LqtrROfZA
+ZOyHODljnyyLMhxqW1UjINi3JSn5bK2iOvIyOt1iNsUixJSKjY+u/QPlPvWb1lBadULFoDx2cfK
gNSxEbFQ8t+2B2voyW2G0TUW4z99H/p/fwQD6XXomFgS15kWg/OsmOGs9fT6z93ji2LFzonz55SG
1amfR8/4grhj66eN4rQY1DvFdb/zr7h+j3FRuQOduvXT4vx2MV15HXn+xnI9Oy95XpdhQcxnUWQK
5VWNaByYRZ9pCZrObpSIldNtXhHTk7dfv51cbrHilOUXt+8WyyjnIR9EOR+5PHL55XXkZcp81s/f
fB/kMirLJS9bvy9y2Z7ep/H59fsupifnJ5ZTPvGU+yDOZxiGYXY/8rVZbnnLgbde/k1eFAGZOvlJ
rrZR5bxvM4q69cs3rlOtHlT2SavWjiK7VAuV3FFw83W2mobcx+3pNMTlIpklGmV/gMySFnGdby/f
uI6cTq24nbyt/LlWzG/zdeR8s8Rta1rHno6Hg5NrogA0vEABcPMsM849EQOWGLSVgUtEDJLWiAFx
eg2doiDI0x1iUFZ+fno5wzAMw+zBiLGufWQGJap+5Nd0o6BWlIEXTrdym+Zesxh051GhHkZ+ddcW
1/vh5Inb1LXrlY3k2jbdK01D3qZCMyzGb+sYLjM89QhlL1oATHMQW7/zYqt4Dr2iQfSPi63n72QO
feYFsUU9/8z59pl+sbzf3gd5Wiz/pssZhmEYpt84h2HLIoYnll4pA+tj4tA2pjEox1YxDfnvVpe/
SOT85Zgnx3CZkenHKKt+oQLg/rQAyAZhnpzF3OwDPHjAMAzDMMxeyKzIgCg0chxXCsCLvQPAAsAw
DMMwezksAAzDMAyzD8MCwDAMwzD7MCwADMMwDLMPwwLA7KnMzs7uSraaN8MwzJuUXSkAW73A7vfM
zc1teT7z/Mh1Njk5CYPBAKPRuGMZHx9/o5+3z/5+MgyzP7OjBUC+2ExPTysv2PJF1V4il8fWy2Rv
6+RVYov1ODIygoWFBTx69OhpHj+B1ZPH3zn/VfLw4UOYzWaMjY1tOf+9Hvl4yd9JFgGGYXa8AExM
TECv1ysvOlNTU5ieeaC8gM+Jy+XPW0VeZ25udsvLthu5HHIrb+OFcKvrbI68H9PTW1/2Q5kVW6sP
ZraevtyK1el0z5wvXpTn5pV1M/uc28nrKMuz5WVbZHpGPC6ihD39eRpz8wvKPObnnr/+XyRbrceN
x3Zhfg4zP7LOpsWyPZiZ2fKy50XOR85vZWVlfcRftzaL7q5uzK1tNIHtkY+PLAHKPMUyzsvnq3h+
P7s828nT+y/uk1KUxXkPxDy+fa5t/Vi/yO/PjLhsq98fuf7k76L8nWQBYBhmVwqAHCjk6bmFJSxO
W6BpbEC3flx5Idu4nhJ5WgyC05Zx9PYPYX5pSTnvwcblW8Y6r6XlZSwtLWJxcdF6mwdbXdf6NrLF
YoHJZHqBt+FnlIFAvuhuffn3I1/E58UgOzbUh1HjFJYW5797H0VmxAu/HMg2nzcnBuSxgS7lqyD1
07PKIPrs7WYfiOUxvcjyWO//3NwMxvRG8e+8cv7cgyn0dWihUon1PziO+fV1tXE7ZX5zC1hdXf7R
9f699SgLz6QJbS3NaGjpxuzSChbEfZLTfPBgDiurK6J0rM9D3H56agJmy+T3pvtDkfORz6Vl8Vhv
eLI6geTgEPgHXUVcYvX6uZutQqPuEv9/cbIAyMwtLGJpZhLapgZ0jumt5WzT+nr1zGFqwowJOQ/x
mBoMRjyYn4XFMI7J6fXprz/WM+vPY7ne5haWsThlhlr8/vSI2ywsPPPckqeV3x8DegeGsfDM78/G
+mMBYBhGRr4+7EoBUF5Mp/WI8/XBRWdvuHoGixexBeUF96HYolteWX36Vm75rRh4+EWgqWMUa4/F
GU+e4PHDNSwviRfg2XkxmKwpb9eura1i7ZG80SN0tajR1tmL1tYuzC7LGwEr4gVw9eFDPBH/PVxd
Ura45DJtDFzy9IwYTJdXFsWgsiK2LEWJWF4SRWLFuiwPTbgRGo1esxhwHq0qt5cvyMtrj5RpLovC
sbTySHnreXlxSSyLOC08mtMj0NEZ8dnl0JlmxTWFJ4+wKF7k5fw2CsDT9TS/hOWJbjh8+jlcPdzg
dz0TE8vWaT0Uyza/uGydxqoe4YFR6DEt4tGadXnlFv6SWHb51rWyJsR5cprLYh2pi6Jw4PBJ5Wso
Hz56jPHOMhw7dBRh14Nw8pQXmgcfyKnisZjWglh+efuVWR2qqjViAF8Vt5GXrSrr5vHjR1hdeyj+
fYK1ZetA+O16FAP82hqa827i0Ffn4eF0CRGJOZhbkWtJzuAB6qtV0FlmxTSs96tflYuoO+XK6SUx
MC2srInrynUqCsjDx2KVrokt78X1ZVixPr/EfX22ADxeHEWwqzNU7QZYBttR0tQtnmc6NJQXIjE+
AUmxkfjNrw+icdQMbUUi4rLL0N3XhYSb0YhLSkL8nUzlkNWbKQVAbKGvzJpwO8gXDpe94eIegPaR
WeXyjefrE7EuHss/G4h1tLIqfhaXPRZFR66PNeWyNfEYief144fKupPXXxX3b375IYYb7iM0JRuj
6goc+OgIuidGEHTpKtrN6+9uzA8hLOgmxhfFWhGF7IEY2OXvT/RVH1xyEb8/XqHoMy4pV30o1oec
v/KcFUriouAZcAPqzjFsvCkin0fyecECwDDMRnatACyLgamrSQuf0AysiRekBcs0xrqrEeTjjHuV
NWioLEDQVV/Exsfj63c/hXvwbVTUa9BSdRtuXj6ISc1BTWMXJswjKCvIx62b8biXlIn0hBtISMrC
pW8+x0m3MJRUNaOzKRPunp4obWtBScY9eLt7I7lQq2wRybdGN2+5LizMoaKkHeqmOlRXN6CpWo3O
tjrER4cir74OQZ5uOHnZA/cq6sULtxh0l+ZQlxMHN1FiKsVgoym7CVe/EKh6WpERHwO/wOuICvDE
x+8ew93cMlFImpAS5wH3gFhoh8zKOwJbFYCFcS0cD7ugurkGwS5xaG2pQ9T1UNyv7IWhpx7X3DyQ
kHAbAWJQULU0iQeqFBXiwRq3mNBcU4H0pGT4uLvjdrlYzqVlZQCqS/bDf37rUzQPTYnB6DGGNQW4
4nEDBvMooq8Foqi8FrnJ4YjLr8NQtxZRoZGI9ffAL989jNahPqTecEeIGKRatNUIC7mJ/IJ0REWH
o0AzqLzbsrkAyHcNKjNu4VZOm3h0LQi+4o9aVT0SIiOQmpqMj95+XzzOHWgvTUV42F3k3k/BiRPn
4X0jFr0Tk+gsTUNocBQa2oZRdC8awZFZ0I/2icc3CDE5VbDMLmJBPHbPFgBpWa9FoLcnfMNiER4e
jrupKeJx88H5M8fgc8UPbkEJqMlPxO/e+wBffP01jnxzDkHXo3HNOwBhEeL5k61en5KVLACzYl6D
bV3wCkqFHGYXJmag661DmK8zbpdWorG2BP7BwYi6mYA7aXmoKiuCn1j/kdmlmBUDdfqNcEQnFqK2
qkzc31soKEjF9RsR4jk5IkrjQzwYbcY1z3Bk5NzFN2evoDg/GwGxdzHY24TIyOsoaaiB12UnnHPz
QWZjq1KKOirScDUsRdRd0Q/E789IVwUCvJ2RXF2H+vI8BF71Q9yteHz160/gFXYHFaoWaCpuwc3D
E3dLW5TfQRMLAMMw69m1ArAitkAa6vsQkdSovMjKt2YTwzyRmp2B4EB3fPXledxNz0Wk+yV8/rUL
bt1OhLuzC3xDQlFeloljXx2BT3QBpoztcDpxDMdOeUOjViHC/SzeeedDfH7ksigCqWIg8Ia7zzUU
FmXAxeUCjh13R25uihiwQzH2QAy0YtDfXABWxWCSFBmGKw4ncPTYBUSIAcnh6y/w288+xYHPv8Lh
E1eQmZ8nSsg1tBlWYO4uh+cVX6gbNMiKi4SXfwjy8hJx7uxpnL0YhJK8JJw69DU8/KJESYmGw7mL
SM7JQGSgP5LLusTW4uJz3gHoxOkPP4GzhzNcPW9DXZeHM198hPcPnYGXhzcKShuhys3ABbFMv/ni
JLR97Qi+Fo5hsx63At3w2UFn5BQWi+W8Co3YUn00b0FKpDs++uwU7uQUYWblMYydxfjid1/Ax/Uc
zriFICHYB79+/3389nMxUHr44PBXX+HKBTe4BsTh/r0oxN2+K+5DkBgwz4rHKALnPn0PHx/6FJ8e
88LY7CqmJ79bAKozExCb2iAe24e4ey0UWeJ+uxw/iHc++BRHz/lA0zeM0oRAMRD/Bl8eOQfPoNvI
TI9GYEIW6u7H4NMP3sFp5yB4XPgSZ51D4HfxDN7/+Ld47/1DyGkeUd7FebYALE+OILemCkN9NfD0
S0RJ6Q387qwHBgbacfOqJxzOnsJlv1soS4/HpbOuSMvIQJB/qHhMS3Ev8T7yc9IQm1y/PjUr5e3/
uRloNUMIvSPvj/QIqZFXkZSRJsqQp3heXYafvy9cXa7i+vVAfH3IAYkZxQgK8UNBRTWiPMTz8jef
4psjDggLjsTx376jrLtDZwNgXHiIhwsTuH9dPFcDw3E/Pxe+py8hLTMXPqc/x4cHPsPnhw7j6Fkf
5Bdl4bJXIPTzj9FckIioe1Xry7OM2yFeSM+9jwD/K/jqqwu4dz8XYa4OOPSNKxLu3IXbZRf4h4WL
cnEXLtcSsfjoIQsAwzBPs2sFYGFpBZa+Nrg6XUVpUyeq0tPh4eIkBq0chPi54fj5APSPm5AedRVf
n/ZFTk423C46iq06sVVYng3Xcw644n4TxUWZOPvVN/C7nYuq5Hh4nLuGyxfO4cBxsWV2JxG+Ysvf
zfuaGAiy4eJ4Hs6+98QLep/YOg7F4OT8dwqA/Lv18uojaAoD8bl40QxwdcWl+HhEODvAOzAKSYmx
OH3UDdlFpfDy9kfL8Ax667Lg6R4AbXMrspUCEIqighScPn0WQXElmDS0wuHocYTcTEOauP3Z0xeR
lpeHu8H+SK/owpoYxL5fAJaxYNDg7IFLqOvSIMjRAScOOiLcLxhffHMal108UFyhRmNuMs4dvgwv
V0/cy8zHdZ8QZOSXIMDFAUePe6KwtAweXn5oGZvHQ3MXropiEOB4Bb/4nSOmngDDTTnwCc1Sho+0
G6E4fvBruLj74XZyGu6npMLf2RHHjxyGs/9NpN2+jpt3k3D3ZjC+OeWGgvJq+J36BiHRN3EzMRdm
sUU+OfFtAZB/jqlMjcKVwBS01WQgNCwEvmc9EXQ1BEeOHMFJpwCx1Z+GK9+4wU8MzL/9+Cu4+yWj
SGyZXxFb617HPOHv444jjoFIjwvFefF4n/ziK7H1GoC4+Lto7hMD/9LC9wrAo5V55KdEw9cvCI3D
k2jIj0RgShHWZqeQGByK3No6VGalQd09AlV+PMKTc6Bu70Zf3wA6OnrQ39eN1h7D+tSsZAGYfjCL
6ZEeUUJ9UKjqRE1mJrzE8/W+2FK/HuSBU5eCkS3Ka+zNZKTdCcdXhy4iPa8C0bEhcD8n7qNzIC6K
UvjRkSsoraqC59GvEX7zFm4lF2JCFD75J5WSWxfx9ic+WDI249c/+zly6joRcvprBETFIzE+EieP
+qC4rBCu3iHoF79wI82lonBcQ3lzJyrT0uDh6oLc4lwEXXPBCYcgDJlNSAr3xuGz/uL3JxOuDo7w
ux6NuqJkXPVPxDwLAMMwm7JrBUAOtkvLC2ivKIDHFQ9cv1WI0f46BPo4I7WsDvW1KoyIAtBSW4aM
7HK0tragsakVufHX8NYvf44joWkoT0+Ap1cEMlKzUdHQjvH+bsRdu4qrYbeQW5CBO7HxKFG1o6tR
DDTuPqhQa1BT3SwG/DGUldTAOD2H+c0FQCzf/OISxvsaUVRcjVZtE8raRzA7qkGIryeSyutRlHwP
Li5XkFqhxZRpBFpVG2oKboki44Xyxi6oS2LE1tV1NIjlralrw4RpCHmZWaiq16C5WYOWxip4nfoU
f/LOZ8jW6MWAtcU7AHMLWHpgQGKYLzw83JFa0oG2MjGwe/uIAasM/e3VuCbKSeytNJRUa2DWDeJ+
dgFqy/Pg5SGKRVIqnM8ex8lzTmI5NVhcWsbK8iJURUliazcQ+dVaMeiswDTcjpLyZiyurqKvSYUm
VS0So64hPKMUfWL5I0RxyiovQUbCbTRq1bgX5Ybwe/lQNzegtXccY62luOrjjfv13WIeS9/5E4Cc
50hrJTzFY+vuFYx2nRmDdVUI8r6KsDsZyEm/jZz8GuQmxMHLJwj30nMR5ecD99BY9OtNKE24CS9P
X6QUq1AUH42Q2BSMDvfijhjQQsWAbpyxfrrg2QLwHQ8ncC85CaMPrPuAvCplH4DJKTGfRXTXlsBL
3KeQ2ByMDDQi9JoTEgur0dzYBI1GjXqVBt1tdfBwOI0jxy7gdmH90+flNXHfkrNL0Dc2gcEm8Vhd
vYq85n4sLor7Iu7DUGsFUrIrxHymkJOcIQrqMsbbK+B3zRuZtU3IiY8Tzz13FKj7YBbrQqvpQ3tt
ETzcPBB5pxgjvTXw93JGunieyt+fMaMJ6upSZORUQKuVvz9aZMd641e//At8LYrfE1E6WAAYhtnI
jhcA+WIqX7Tl2+1yJy65cxogd5BaFYPGirLj1MPVFWUvcfkCv7SyikcP13c8W1tGaVoiAkIiUTNg
Vl6cgcd4KLZkVpeXlMFbeal/Is5be6jsGLgqd+Rbeahcc3VlRflZ7gW/KvdCF/OXyyFfAOXAJU/L
FTC/uKJswcp5ri7Jne6+Xa6NHfserlqnsyjmu6LsyPZEDLJL4v6IJRDzXxEv6Csrch+DBaw9FMsn
5rv26DGmRvtwIywMoRliEJtdwuL6nvCyAMj1s5EHs/PK33alh+J+L4vlUfbferQmipP19CNxv9fE
ciwsLirLK3eGVDyZQ015LUxz4n6L9brxKYCVVbmz4vqyi/PkpzDkW/Vy/otyfwZRBOQ+lHJHPzmA
W6+7JtbvI7G1vYyH4q7JnS/lx+7kvguLy9b5rYkS8+x6lNOU7/JIT8T6WFpYwKLcUU6e8fghHj4U
j41cn4+tg/NjcV+slz0S017A6vr5cufGVbHe5GAlS4Zcvifi+SA/QSDn84MF4DWRz1n5sTn5fJXP
R/lYbzxf5Y52j+S6l88zWbTEunnyaAnqulrxi7QgF1bZ12TjeflIrL/FBbHu1p+Ta6JUyOecdX1Z
n+sPRIF6KO+vuI8L4rFWriem/3B9nayJ55n8+OaieG7KnQ/l8sjbLYrbWx8z6++PLLfy8ocbvz+r
SyhOuQP/0CjUD5mVecv1J++f8tzf9Pxjdj7yMWcYe8qOFgC5pSs/dywPqiIHCvni8zIZF5Fvxcot
ppkJC8bHt77ey0Quh1wm+Tn8V1mml8r4OEyWCeVz5ItzD2AxWe+TvGx0dPT713/FjIstP7muLeYd
vj+bsqvrcT1yPvK59L3jALxmcoCU922rZdgq8nkpj7kwaTE/fXztIcrvj3x3Rvn9sS6bXH/yvu3W
Y8bI58e48nHiZ18ffyzyd1pu1NDOka8lcj1vrPOtitubks3Praf3V2RHCoCc4cbBVNbW1sTW36rd
RC6PLZfJ1vN/XbHF/ZDze/JEee9gxzwWW95bzftNyJvy3NtrkSVg80DzIpHvdKWnp+Pq1au4du0a
85rj4+ODqqoqZT1vrHP5rqYct960yIOAbX5ubWTHC4B8q5GIaD+T77i8bAGQRfTQoUM4e/YsvL29
4enpybymyAJw4MABuLu7K4+PHKfkeFVdXY3m5mY0NTW9Mamrq4NGo3l64L3N2fECIP8lItrPXqUA
yIN7ycE/JiYG2dnZyMzMZF5T8vPz4eXlBT8/P+XxkQVA7pclB3/5bo380+aPRq9X/qw2Pm7Y+vIX
iF6/8cVm4+L0t+cbDHroN66z6fTLRv65b2hoCGq1GvPz1iOHbg4LABHRDnvVAnDmzBlEREQgLS0N
KSkpzGuKLAFubm7fKQBy4JcFQA6ach+tH8yYDiYx8Lerm9DS06sM0lteT2ZML8ZCI8a+d9kYRkcG
0dqiRmOTGv1DI8o+OvKy4eFhjKxfb/Ppl42c3sDAgPIOAAsAEZENsADYV7ZXAMZgNuqRGRuG49+c
w8nzzihvHsTCgjw8+iRmpmdgMoitb6NZ+YTPhL4PFRUqjBqMsEzOYGZqAvqxUZgsZpQlX8enB47C
xdsPDd0GLC4uYdbQgSDfcDT1W7A2N4bokEjUd+rEGCumZTLCZLYo36Uip/FjxYAFgIjIxlgA7Cvb
KQA6MZAPtJTB6ZIn2gwPYOrtQmF2Oq5H3UFefioiY6NR3TGErpo8RETGIOV2FN566zOUt3ajLDMG
Efdy0DNqwNSkCZk3Q3At8j70Jgv6tUXwveqNvOp8+HqHo6K2DHGBjvj4axfUNKtw9+Z1ZFY1oqIw
E6ERd9HSNwyDzvqOwfPCAkBEdk9+skO+WMm/V8q3PPdi5KcrnocFwL6ynQKgHzdDW5UO96u3YH4w
g+XVGST4OuPiBXcc/uCXeOeDd/GFQxCq8hPxyXtv4a33PsUJRz+kiMH+3V/9JX7xzrsISa7CwtIs
Cm/5i8sPwS8kCle9nBAdE4ZLLhfh4u4L58sOuJlwA+dd3HH+m0N457138OEnB/HZ7w4jJCYbQzo9
dOt/MnheWAB2mHyLZ2BQvgCMMXso8jGTX9tM9kF+Hlvugd3R0YH29vY9la6uLuXjZPKjVs/DAmBf
2U4BGNOPQ9fTiCsXLiGjqg2awizr94yIaZ775FOERMcj6kY4nL5yhN/Vq/jodwfh7BeLu6Eeynd2
3LgRgfTiJszOTSI9Jhhhd6uxtjAEr8uXUVReCPfL53Dm3GWcOO2IkooieDmfx8H3fwe3a2GIiwjA
ybOeqOschXlct+XybQ4LwA7r7RvE4NAIJienmT2U3v5BDA2Prj+KZGuyAMg9leWe2GNyByvx2mEc
12Nsiz2bnxf5wr15T+rnRrwoGkwW5UV/asIszhv73nWUaT1z3vMiBw75AssCsHey3Z0AjSYjmoqz
4Hj8LJxd/RAXn4R6bR/qc2Lh4OiElIom5EZHw/HCRfhExiIyKADZxRVICHbBJf8baOwWY4ZlHDVF
2cgqasTk9BQ0pTdx+tQJ3MrMRU5OMUpy7uDiyW/gFhwNVVWBKAIXEJ6UgeTkTDR3Dv7o2/8ye64A
zMu3VHboOC8PV+Yxu/h6DyM7MDjCLck9aHrmAUZGdes/ka3JAiBffOWAatCPoE5sUWs6BsSLsvyI
1ZjyQjY2Zn1BU6IMvtbTGwOxLA7KW6Lr521cVzm9/mIo/9UbjOjVVMH/2jXcySoXW3RG5XbfmdbT
229M+7slQS7LxousHDBkeWEB2Dv5oQJgLaHW58PWkY/7GMbFYzohCqTZYoHFYhbPW1EGRbGckN+R
YpRHgTXDMmFRvjRNXi6PGGq2TIjLrdcdGRmFQR7dVhRdeXrcKG4rD0QkpmsSBcNokreX17fAaDQp
p+VlZrNJlFPr4L/18n0b+VwdHBzcCwXgEZpyEnHpnBOuhN7C6PTz/572rGmxQianpsWdtayf833T
Y50IdbuCi25XoR0UC/+MlblJGMzz6z+9OFkA5HH3aW+ZmJxiAbAj3xYAPaYtQwjz9kJKaSv0owPo
HRgWA7QcePXQiRdeOeAODfSgT/zuGU3jGOzrwbBuFNl3biAutQpTUyZ0d3VjzCA/zz2Cnv5+Mcgb
xIvmiHih1cFi7IHfhQuIuJWM+Ki7UPeNwiRehPWGMfFiOQT9SBciAkNQ0twHs2EY3T19MBiNGB4a
QP/QkNiiGsSoLAEsAHs2zysAKpUKcn8OOWi+CZH71HR3dysHBLLrAjA7rMY1twjMPwIGK1PhFZ6K
qtI83E7NwMQTYHFci8yCUujEL1FDVQUqKupQU5SDkmotAp3Owf16CmrrGqBuqMbdhERohxexNtmB
hNu3kKceRkthAoKvp2JuchLqpkZRMFYxZ+xFm6YROVnFuHXtMo5euY2VZQvKCjPRqpvAcG8r0nJy
UFxeicrGrvUl/S4WgL2JBcC+bC4AU5Zh3LkegLOnHXD62DGcdQxATHgY7mUUIvVmNGLib8HD4SC+
vOSJ4MAAnDpyHBfOO+PzD36DI643UJLuhy+/+hz+d+IR4OqI9z46hNt5tUiPCUWxGNSnJ3RIDnPF
ZWc/lJQVISA4AlU1Fbju5YLTR4/h/BlHvPUXv0RwYi7uBJ3Dx4dPIuB6pPL1zodPn8aJM04ITyyC
SWx4sADszTxbAOQ4Jbe+5UApH8s3KY2Njcp+KnZdAHSqXARGFCinH5u6cPHDQzjtHovUtDiExMbB
8/in+PDAZzh26jxOn/JBc6sa193O4N33D+LrY5cRn3wfUf5eOHrSHWlJCfD3CUNUhD/SMhPg4HUL
a09WURgfgAtugYiJvI6ElPtIToiB67lT+OroRbieckRoYh4ywp3w209/i0NHT+PsOQ94eXnCxfUq
vANiMDjx/S+hYQHYm1gA7MuzBeDu9av45NOTyKlWI+l6KKJibsLH7QLcgkLg63gKv/nkKFwczuKz
T4+IwV2F8uRwHDh0CRk5WcpXZPcOtsHl9Dc4dj4QlfnpuHzhOC5dvYHOEaPyLoJON4r60hQcP+2K
q9c8cNrRGSHXb8Df8wKcHV1x/kokCtPj8e6fvw1XDxcc/vxL+ITEISJYLMuNaHj5xkNnMVv/pMAC
sOfybAGQ61uOVXKQlO8GvEmR92mrwV+5zyJ2UQCWTN3wdw1A79gkatLvwtn9GqJuVcMw2gyPy5dw
+osTSL9/H7Gh/ohIrYC26D7CvW7Ay8URhx0CUFZRiUB3J7hfzxdTm0aohytcfaNhMfXhZkgCNP1d
GJp6gIKUW4i9lwlvjyMIzqxEU1EWfN3dceqkI+6XNyDS8SSC41KQdCcWHr4JKCspRFpGAe7GJ0Cr
W7Qu7CYsAHsTC4B9+d47AKHe+PywIyrV7bh9PRjZlS0Id/gIp8Jz0Vp0FxdPn0LozXh4elzF/bJm
FKfF4ujXR+DjH4WYsMu4dNkBzt4ecPWMgm7aBMcT78IzoRDTM9MYH2yFf8AVsVXvj3NukairTcNv
Pj2AWrUGYefO4KvDX+HwkdOIvBGHa5dOwzs0EsGhIQi/kYDoqGjcuiXKiH8CC8AezlYFYD/GrnYC
HGwshquDC3xvl2CsvwEnDh6Ek3cQOkwWdJfdg1fgdRTWqVDd2IWJ/m7ccPeCu9gyT7l/D7diEnA/
JxvZJS1YXZ5AZWUjVIW3cPiLj/DBlTgM96vg4eoI19B4mOYmcN33LMoGJzFcmg1PNz/kFaYh4WY6
ertVCPP1RHJ5LcorGtGq1UDV2ILaqhrxQmL9rvbNWAD2JhYA+7J5J0C5dd7ZpkVDoxp9g0PobG8T
W/TD6GrRoLWjX5R6AyoK0pBRXIX2zk509w6I39suaJtrUSF+b/t61UhJTkNrTz+6u3qhqcnEOcfL
aOgdg1E/phy2tb2hAncT76GlswfJMT7wiLoH04QFNXlZKKxpQEdzDWpUrehsqcLdtCxoOrvR0dGp
fOyvs7MD2tZOZT8A/glgb+aHCoAcs960bL5/m2NXBWCzRVMPCita1396NZ2V+WJL3xV3mwbWz7Ea
bytCWGI+Xsc3bcsC8Kr3kWyHBcC+yAIgB1G5I5b8khWjGDCVPacNBuW08q94PTEb5eUGTExNY1oM
2Mre0uMG5UtZlD2sxXnjRrMYbKdhEufJv+t2NlejtF6rvB7JwVq+y2A0T2BGvE5Nm8ZQXlqMtj6d
uL4BFjHdKTldcbnFbFL+nZmeUqYlP/qlRJyW85XTkpE/t7S0sADsofxQAZCP45uW55UAuy0Ae0Vf
/5DyufJHjx4xeyjyIzY8DoD9kN+ZLw8EJAfS1xn58afW9k50i612eVqz+fL1n7u6utHeplUu33zb
F41Wq0VlZaUywD8PC4B95dkCIP9WbrFYlK/O3fxVum9C6uvr0draat87Ae5VhnGTeAHoQFd3H7OH
0qJtV7YYyX7ILRX5miFfiPda5DsNslg+DwuAfWWrAiA//y/3mJfv6sg/7Twv337OfuvLXzUb093q
sleNnF5/f7/y5zUWACIiG2ABsK9sVQBe5EiAygGiRofR19eHUZ31yJNbXe9lI/d9GRkeFNPtx/CI
mI9yvnV/lY0DD8nletnSIQsADwVMRGRDLAD2lVcpADqDCQMtpTh16BDOO5zFsfN+aOodVx6rSbMR
BsM4JqemMDVpFgOvzro/iTgtpzs5OYlJ5Z0is3JQK5NlStmHRSemK/dtqcuJx+cHvsb5y26oaR/F
wvwCZsZ7EH09VpnH8qwed2PjoeoYVeZnMY5j3GgS07f84NcCswDsksePnzAvEaL9hAXAvvIqBUD5
FsDKVFx2uwHTrAGhzq5IzqtGTXEqsqua0NGmRkpCHG6llihHjSxIvo2U7EpotRokJycqB5VLzSzC
oG4UqtI03Msrx5DeiMkJE7JvhcE3MgumyQmM9KgQFxONGk0lrnkGoaq5Cdm3/fH5YSfUaFuRl5GI
0uZ2aBqrcCcxE9q+4aeHBn42LAA7TP6Syo8EdXb1KocMZX48Xd29Yp11YPUHvj6V6E3CAmBfebUC
YEGvKhMfv/MBLpz+Bocv+CApOhDvvv0X+NVvD+KLQ0fh4OQJxzNOyCmpQqTz1/iLX3yME8cdcFo8
jt8cOQUH16vw8/bEwfd+jj/71a8RmlKD+cU5lNwNwq9+fQBXg6IRGuAEHx8XOHg4wd0rGN4ejggM
8MA3Dlfgfukk3nnnL/H+Z1/hkMgV39voGdGxANjKwsISurr6lO8zZ148Xd39mBNPSKL9gAXAvvLK
7wBUpOKyZywsxl5E+F3F4Y8/w/EL3rgZFYxjxy6huKkX+SlRuHD8IgLcAnHp9DG8d/A8UtPTEB4W
i5TkeHz13of48msHREeGIDGnFg/mppEVHwa/mELMTnTjyiVXNLWpcdXpHE6euYQjJy6LnzUI83HC
R798D04+YYgO9sHRk9Y/F0wYDfwTwItYnJoUyyQWHI9hGhnH8ms4EMDi4hJ6e797nAH6cfJrlOcX
+C2KtD+wANhXXm0fACM6G4tx42YmLAszqMxIxp2bNxFw5Ry8btxCXNwdVDa2oTQvHTcjEnD17AWc
OOcEF78oFBTmI+leOrIyM5Camolo34s4LwbymvYhTE0aUZGTgsTMakzPTqM+JwzffH0IIbcTce/e
fdxPuoFThz/DGTc/FOemwu3iaQTdTkJMzF3UafuVbxbcanllWAA2ac9NR8LtRnFqBbHOERh9emj/
RRTmlqKrbwB9o1Pr570YFoBXwwJA+wkLgH3lVQqAjPwUgMEgLh8ZVfbQlwep0smd8MZ0MMqDVIkB
VznQlGlcDL7D4vryQFHjyjTl9eW/cuc9+emBkdExMS35tcAjysGvNr4iWH5tsJy+/Kpg+XXYGz/r
DePK1wKPjo4o325pnd/Wy7kRFoBNOvLvIzFRLU49RqpHADx9guHk5Izo+zH4/MNPEH4vD2mJifD1
9Yabnz+8A6Kh6hhAXWYwLnj4orrv++WABeDVsADQfsICYF/ZqgBsHAdA+UieGJSfFzmwKqflv5sG
26fni8F683kb5z/v9Le32Xza+rP1Ohs/f/e2Gz//UOR1eByAdV2F6bibrFFOJ7o44etz0Ziem0TE
1ctwC0pFTVUxzh85h/h7aYiJiEVaVg6uOlzAgd9+BhenC/CLK1ZuuxkLwKthAaD9hAXAvrJVAZAH
dJJHzZOD5VZH1NuLkfdFpVKhra2NBWCqX4WomGCUVZQgKD4S7o7XEH/7NoIiQ+F/NQhxcbdw4awr
MovKkHwvA8XFBQj28UeguwtiExJRrh1bn9K3WABeDQsA7ScsAPaVZwvA5vUuH6c3LXIc3nwfN7Kv
CoA01teMnIJSmB+MINjdGeHxqRicXoCptwm1qlb0DQzCZJnAuMEolt8Ey9QCxnvrkZRVCOPi4/Wp
fIsF4NWwANB+wgJgX/mhArCfsu8KwLdWMTxsXD/96mQB6O8fWv+JXlT/wDALAO0bLAD2FRYAa/Zx
AXg9lpaWoVa3Kl8bKr9chvnxyHXVrGnFwuLi+lokerOxANhXtioAcqySfyeX+wO8iXn2+aXcZxEW
gG2QB7WR3wg4Oiq/qIF5kYyKyI+4POEhgWmfYAGwrzxbAOQ4Jb/RUX4KQK1Wv1FpaGhAZ2cndwIk
IrIFFgD7yrMFQG4hy48Byj3m5cfnBgcH34gMDQ2hp6dH+UQACwARkQ2wANhXtioAGwcCkkVg82ft
txOD0QiLxayMhUZ5AKEtrrOT4YGAdtjq6iosE1OYmGReOBOTmHnAYkj7BwuAfeWHCsAPHQnwZSKP
+NfVUALnE8dwxj0I9V2jmJywKMcbMOjGMKYziNMTGNfrYBDzluebxuVRBr97sJ/thAVgh8m92Ts6
ejAyKg/tyLxIhkfG0NjcouxASbQfsADYV3a6AMh9nUyjXfC/cBF3CtSoyYjGOc8oqDWNyrzbhsZg
HOtCUWEBtP3D6GlrRvb9TFSre2B4TQVEhgVghw0MjmCRe7O/NFmc+G2AtF+wANhXdrwA6M0YUBfA
4Yw/BmbmMaNvh/vBL/HhgTNwuuwA14hoxHifxVvvvoVDJy/g2OGTuHzxAs6cD0TniPG5X+/7stmX
BWBQlQdHpyvwu5UF09LD9XO/6+HKMpZXH6O/IRtuzk5wdHRBcGIOpueefkPQC5EF4AHfzn5pPBAQ
7ScsAPaVHS8AOgP0/c24cvISKnonMazKx8lvjuKcawL0hl54OJzEez97F94hkfB1voCjF4IxrOvC
VRcf1HWOKH8i2Gq6L5t9WQCKwgIQc78R9ampyCrpgnG4Da2DeuUy83A72oZ0qL4fBZ8bhVhZnEVj
xm0E+2egr78dTdp+DA/1o0+svP6BUcg6sPpgDO29w9iqSrAAvBoWANpPWADsK7uxD4DJbEJt9h2c
/PIoDp/zQk5JAc5/cRBfHjmB0OQ8FN0Ng8MlR0TcuYuQsNvo6tUiPOgGmntG+Q7AdtTE++OTr8/B
0SEYqWn3ER3kgEsBwcgrzENswEVcCfbD+XNHcNE3CfKT6Lq6EqTea4RR1wLvy65wdHLCWQdHOHkG
415aFkKdv8C7v/sM4Vkt1hlswgLwalgAaD9hAbCv7EYBkF/3K78WuLejBR0DYzANqeHvG4pabScM
BhNM4zq0tmrRPzImBur127zGHQBl9mUBKIkMQWy2Br2V6fjsg4Mo65nEaEsevvjyBEq1eoy3F+Kb
Y64ob7G+KzBQmYfE23UY7q/B6aOXkF1SiYyk+6isroDHiWM4dOAUkm7H4fb9WuX6m7EAvBoWANpP
WADsK1sVAPnxP1kAZBGQXwn8uiL38B8X09aJwXhsTKdMX69cJsYicVru9CdLh7zuxr+vK3J68lgA
8oBA+6YANKVF4auTjnDzjERpeSmiA07igl8sNK1qxPmdwEW/GygoTESA702IuwFDUxVyMjUwjGpw
VWz1l9TUIz+3GNXVogik5yHrpj98QqJQPzBlncEmLACvhgWA9hMWAPvKVgVAjlfV1dXf+0rd1xlZ
MLY6fydTV1envAOwIF5vn32OvZEFAE/WMGE2wjxt3Tt/eW7y6c59y/NTmFo/PScG7kfyxJPHePz4
iXJY30ePHonT8mdrlIsfLsJomVL+XPAsFoBXwwJA+wkLgH3l2QKwsc4nJyeVz+O/aZmenv7Oc2sj
b2YB2EXKt9rNcyB7WX39Q/wYIO0bLAD2lecVADlevanZ/Nx6en9FWAC2YWh4DC3aDmWLlnmx9PQO
oEmtxfLKy33kkmivYgGwrzyvAOy3sABsk/wzweLSEhYXmZeJPIQy0X7BAmBf2aoAyLFK/p38TcxW
OwAq91mEBYCIaAexANhXni0AcpySf//XarVKWltb35jIHQD7+vr2z6cAiIjsCQuAfeXZArBxHIDa
2lrlc/O9vb1vROTA397ejsbGRuWdgGefYywAREQ7jAXAvvK8AiA/Ly+PByAPoLOdyIPwGM0T4nGc
wcz0lPJVwE8vV74F0Az90+vrxDz168cJeL2RxwIYHBzcXwcC2k3yIxZVVVUoKytDeXk5w9h95HO1
pKREOeoY7Q4WAPvK8wrA6zkSoPUIgPUFyXC87Iwr3qFo6h6AUUx/3GSBYagdWZmF6Bs1wGQ0wqAb
FYP0EEbFgK3Xj4vriQKy5XRfPrIEvPFHAhxpKYN/QBDCY1JgUnZ4WFq/BBjr7UDX8LcH8DF1qRAQ
4IfMijbrMQC2qaGhAVeuXEF6ejoyMjIYxu4jn6upqakYHh5efxbTTmMBsK/sdAGYmjDgVqAHPCPS
UXQvCJc9ozBmHENjkwYD3bVwcQpAh/j9Uzdr0N9dD2eHK6jtHsVIbwtUmnboxLKMjW7/sMD7ogDk
xIfhRno91CV34RcYhYbWQSwsPYBhfBKlabeRUT2I5cU5rKyYEHLZDZUtXagrb4JpZhrDQ0NQ6sLK
PEZHRvFgvTvohwdhmrV+TM1sGMOD1a0OAwTlb0byl5Nor+HXWO8eFgD7yk4XgEmLDncjgnEnV4PF
2SGEOnrgmvd5fPjR+zjueAVeflGIDXbCR7/7AF8eO4Jfvv0p7t7PhPvJj/BXHx1EdLYKFotxi2m/
XPZFAShMvo2yVrmV/wgxDhcReOs+oj0dcOSkJyIDoxEeFYO7uTmYEC946uxIXHENRFVbJ6K8fXHx
kgP8MkqwYm6Dw8mvcPpqMuqKkuF+8TL8A5JQlnkTp45+iq+vRMIw+/3vA5SHWUxKSlr/iWhvkB9f
lS96tDtYAOwrO18AxnD7ehCSS3uwYNTC+4QY5P/8bXgEBMPl3DlccnTCBz97Gy7XguB2/jScA5OQ
e9MPb//qEPyvuSE0Pg/GCfMW03657IsCkJ90G7V9y+KUGYFi5V4JjkfavVgEB4fB84wz3vn527hZ
pBGXP8bywxWYx1px6fQpnPVIFec9QXR4MBLjEpEQEY7jx0/gtKMvZuSEpw248OGHuBJ0A9e8gtBt
WZPnfgcLAO1FLAC7iwXAvrLjBWDSiLTrnjhwxAFO587iXm4JUkI9ccnVHVEJ8QgIjMSNAE9cdnZF
TMo9eF66hJj4BPg7n4WTbyjy6zthMm53OfZJASi/F4qTl68h8OpV5Jfk486dDGTHxsLh1Bk4OPmh
pq4Vd65HoaG3BwmiZQWEBSLkRgycz12Ek8sVXM/MRUbADfhduYZTruHISL0JH2c3hAQnIS/pJoJ8
vRGbXY0HS9/fa4AFgPYiFoDdxQJgX9nZAiAGXrn3fW8HykuLUVajhsE8AcNIL8rKStHWNyAG5SHo
RgdQLn5uHRhGb1sz2rsH0dPeiNJqFYZ1r2dHwH1RANYWptHd2Y7uYYvy88rKGpamLRgYHsPy2kM8
fgKsLs1idvkhVh+Y0d7WgcVlE+LCr6OiuQsLclx/vIi+zk7oJuSL4hMMdHdgdMJ6jP+hPnH++hcL
PYsFgPYiFoDdxQJgX3leAZAfAzQajUoJ2G4MYjoTExOwWEww6OXXAlt/Vj4NICK/Jtii/GyA0WQW
8x1X/p2wmJ9+RfB2Iz/SKHf2faMLwKt5jIXF7R+LngWA9iIWgN3FAmBf2aoAyMdIfqRbDpbynYA3
IbLQ1NfXK6d5IKAdwAJAexELwO5iAbCvPFsANtb5xta/3HJ+UyLvj3znQY7Fm59fMiwA28QCQHsR
C8DuYgGwrzyvAMjfiTcxWw3+MiwA28QCQHsRC8DuYgGwrzyvAMjx6k3N5ufW0/srwgKwDSwAtBex
AOwuFgD7yvMKwNTUlPJ2+ZuW5z33WAC2iQWA9iIWgN3FAmBf2WonQDle1dTUoKmp6Y2KHKNaWlq4
E+BOYAGgvYgFYHexANhXtioAcoc5ube8/Iie/Pz8q0cH/cYOeDrdFpevX0ev25FvANycjW8DlJ8G
4McAdwALAO1FLAC7iwXAvrJVAXhdBwKSA+9Qfw/a2jowKkqAbmzr6+1G5LK88QcCsiUWANqLWAB2
FwuAfWWnCsCY3ghdVw1OfvwJTp06j6D4AoxPzSgDrcWoh85gxMzcIqbGWhAUGIOuMRMmTGaYjNZ3
HYzieSIPDjSjXH9c+crurebzomEB2GEsALQXsQDsLhYA+8qOFQCDCYPN+Tj5pRvqGivgfSEM9XUl
iLkRhWJVP/q1FfC/FoCU5DvwvBoFVUsDikqLUSkG3oGhftRVViAnIxUBvr7IqldjXJSArebzomEB
2GEsALQXsQDsLhYA+8pOFgBdexk+/cu3cfzEETh53YOq+B4++vXP8eHhy7jm5oKomLu4ExqCo599
iQNnLqK8thjuV4LR2d8OP6fz+OSTC7geEYZTrj5oHTTAoBvbcl4vEhaAHcYCQHsRC8DuYgGwr+xc
ATBjsCkXxw66oLFDBbdjR3D8i8vKF9X9Tgz4Zy56oKl9CE3Zd3D4w69x/KQDMvML4e3kj+LqCnic
O47DJ32haqyF02UP1HeNYlzPAmC3WABoL2IB2F0sAPaVndsHYBz6vma4nTyCU6dO4sa9MmRG3cDF
s+dw5XoqKnJu4uQ3x3DNNwy300rQ0VCB8Jg7SLkZgeMnHBEeGIITXxzA518dQ4S4fNxo3HI+LxoW
gB3GAkB7EQvA7mIBsK/sVAFQotPDMmGBcdwIk9kkYrTu3CdOK9/6ZxLnW8wwm6zfCCh3AFTOM1sw
ZexD4u0UdI4YMSmuv92vBGYB2GEsALQXsQDsLhYA+8pWBUB+bl+lUikD59DQkI0yLAqIDiPDW132
8pFfBdzT06McEIgFYAewANBexAKwu1gA7CvPFgA5TslD5jY2NioHzXmT0tDQgM7OThaAncACQHsR
C8DuYgGwrzxbAOT6lmOVHCTlv29S5O+5zLPPL+U+i7AAbAMLAO1FLAC7iwXAvrJVAdiPYQHYJhYA
2otYAHYXC4B9hQXAGhaAbWIBoL2IBWB3sQDYV1gArGEB2CYWANqLWAB2FwuAfYUFwBoWgG1iAaC9
iAVgd7EA2FdYAKxhAdgmFgDai1gAdhcLgH2FBcAaFoBtYgGgvYgFYHexANhXWACsYQHYJhYA2otY
AHYXC4B9hQXAGhaAbWIBoL2IBWB3sQDYV1gArGEB2CYWANqLWAB2FwuAfYUFwBoWgG1iAaC9iAVg
d7EA2FdYAKxhAdgmFgDai1gAdhcLgH2FBcAaFoBtYgGgvYgFYHexANhXWACsYQHYJhYA2otYAHYX
C4B9hQXAGhaAbWIBoL2IBWB3sQDYV1gArGEB2CYWANqLWAB2FwuAfYUFwBoWgG1iAaC9iAVgd7EA
2FdYAKxhAdgmFgDai1gAdhcLgH2FBcAaFoBtYgGgvYgFYHexANhXWACsYQHYJhYA2otYAHYXC4B9
hQXAGhaAbWIBoL2IBWB3sQDYV1gArGEB2CYWANqLWAB2FwuAfYUFwBoWgG1iAaC9iAVgd7EA2FdY
AKxhAdgmFgDai1gAdhcLgH2FBcAaFoBtYgGgvYgFYHexANhXWACsYQHYJhYA2otYAHYXC4B9hQXA
GhaAbWIBoL2IBWB3sQDYV1gArGEB2CYWANqLWAB2FwuAfYUFwBoWgG1iAaC9iAVgd7EA2FdYAKxh
AdgmWQDu3bu3/hPR3vDkyRMWgF3EAmBfYQGwhgVgm2pqapR3AOQvK8PslaysrCi/p7Q7WADsKywA
1rAAbJPFYoHRaMTCwgLm5+cZZk9Ebv0vLy+vP4tpp7EA2FdYAKxhASAi2mEsAPYVFgBrWACIiHYY
C4B9hQXAGhYAIqId9qoF4OzZs7hx44YyYGVkZDCvKbm5ufD09GQBEGEBICLaQa9SAB49eoQvv/wS
ly9fRlBQEAICApjXlLCwMHz99ddwd3dXHp+t1v9+CAsAEdEOe5UCID+pkZCQoBQAZ2dn5jXGxcUF
ly5dQlFR0dNPxOzHsAAQEe2wVykA8vryXQB6/eRxMCQ5+L/s4/ImhQWAiGiHvWoBkB8vloMUw2wn
8qO/Wz3/WACIiHbYqxQA+aLd39+P6upqVFVVMcwrpaKiAgMDA1hcXPzec4wFgIhoh73qPgByj3X5
9+qYmBhERUUxzEslMjIS169fx+DgIFZXV7/3HGQBICLaYa9aAOTn/9PT0zE5OQmdTscwL53R0VHl
uSffAWABICLaZa9aAOTgn5ycDL1er7yNyzAvm76+PkxNTbEAEBHZAgsAY6uwABAR2RALAGOrsAAQ
EdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOr
sAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RAL
AGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR
2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uw
ABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsA
Y6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZ
EAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AA
EBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBj
q7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQ
CwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQ
EdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOr
sAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RAL
AGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR
2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uw
ABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsAY6uwABAR2RALAGOrsAAQEdkQCwBjq7AAEBHZEAsA
Y6uwABAR2RALAGOrsAAQEdnQqxSA1dVVZfC/c+cOdDqd8kLOMC+bnp4eTE5OsgAQEdnCqxSAhYUF
1NTUQK1WK6+lBoOBYV46sjzKcVg+n3a9AMzNiSsSEe1jr1IA5PXlVtva2hqWlpYYZluRY/Kzz7Ed
LQATExMYHx9X3n5gGIbZj5Gvg3JLbPPr48tEFgGG2W62em7tWAHYiNz5YKtfCoZhmP2S570AM4wt
s+MFgGEYhmEY+8uuFQD5JwG5P8BuZ6u/ezAMwzDMfs+uFAA5CMu3weT+ALsZ+Xc3+fe3zSVgfn6e
YRjmjY/c65sbQPaVrTZSdyPPex7sSgGQT0SNRoO6ujo0NzdDrW5Ge6saPZ0a9Iq0t6mhFuc3NTW9
1jQ0NEClUj298/LfoaEhdHV1KZ+NZBiGeZMj98FiCbCPyP1AjEbjlhurOx25Ab7V82BXCoBsoy0t
LRgcHITFJBbIoENJTTeCb2sQKFJa1yPO18M0Lj+zqFeOeiWjExmXK0x+nlHcCYPh28teJPLzj7Jw
bCyHXAFtbW2QR0caHh5mGIZ5IzM6OgqtVqsMOHILcPPrMbP7kRvBcuOzsrJSOa7D5g3VFvE4tXV1
ijFSi6ZmsTGs1qCzs0u5vox8HBsbG79zmxeNHP/q6+uVf+UyPLtcu1oAhocG0Nc/iCsRKvzV2Wb8
59Ot+NNjLfjXh1S4GNqsPHH1ujHlySujE6f7RIsdGB7BoBi0h8S/Y+uXPZuRkVFRFkxKuZCnreeN
fK8AdHZ2KuVA/mIwDMO8iZHHYJHvdMrTLAC2jxx8+/v70draqhwTQtmwlY+T2DJvqatDUXoGWrva
YdD1Yai/HSlJt3Hq1CmcOXMGtbW1sFgsmzZuddCLjWKTeIzl42wS01HOe3r5t5F/BpfjqnwHXo7D
zy7XrhUArSgAutEBXL+nwX86ocH/+tsW+CQa4J1kxB8d7MAffdaCkOR2TJrGrIP8mA4TugG4HT2I
oIwqpMREobBhEIuzU6IYGDA59QBTYqXIO28Qd35iwgx1XTXqNT1KCfihAiDfGdjqbRKGYZg3IXKQ
ka91LAD2EVkA5DvPcmteJwbl7sFBdMnj9IvHKf9WAsJ/+g8R6eWEobFW1Fek4+P3fyEHYiU3b95U
/nzwdIN3TIyRI4NQq2pRUVEBVbNWnKdXLpPvlFssZlEkxjAifh4T15XztXkBaG/TormlA5+7NeJf
ftGOf3W4HXGFFhyP1OEfH+7G/3G0H285t2FgcEh5F0BnMKJHU4VQ32uIv3UboQE++OLYBYSl5YmC
oEXENQcE3k1BWWU5mlp70dFYhIPv/BxHPBNgmrQoJYIFgGGY/RgWAPvKRgHo6OmBKi8PSb/7HXKP
HEHWF4eQ9ZtfoeNf/iMU/fE/xP3YQOTmJeLAx2/jr/21v44/+IM/wN27d5V9OTYKwLjJgpayJBz6
3Zfw8vFCVFKuGPNmMT1lhLahGplZRWjrHVZKgN0UgM52LapVbfjZSRX+yWet+Du/VqO8dQ5JtbP4
6bEB/BtnHf7MqRetnUMY14+JaU6j5O5VfHLwS3z6+UGcPOeCiLhE+Pt74PzFS4iJj0VIoCsOHnZA
oaodBXeC8Ot3DyAytQLmCaOyolgAGIbZj2EBsK88LQAilWKLvvo//kf0fvIpuv7yzzH0Z/8P9P/p
f8eDf/1foeFP/xAx7sfx0Yfv4Pd//7/EH/7hH25ZAOrzEuDkHoXuwQE0VZbgfkkJqvNyERMVirf+
7M/hHluIiUmT/RSAjjYtWlo78YtTtfgf3m7G33pLg6TKaSQ1LuBfXBnHz65P46uoEfT0DSk7+1lG
2+Hr7Yqkwkbcv+GC//dP/gpxKUUID/LG6TPncevePUSE+eDEUUdExt1HdKA7Dh48jpjkMphYABiG
2cdhAbCvbC4AVbdvI+fv/32o/uinaPsnfx9D/+y/h/mP/yZWfvY3gE/+Du4c+FP81S//An/zb/3X
+Nt/+28jMTHxmQIwAXXxbXz8m8/g4e2N5IwsOBz7Db45649wP0+8/9vDuFesgcVksJ8CIPcBMIwN
wDO6Gf/tz+vwjw50oqF3EbUDq/hF7Bx+m7iA2KIRmA0jYoDWY7hbg8z0LAxPzMM82AC30+dw+uwF
BN8twNhgM4LcT+FafDZ6tDVwv+QI34CbyEiKRWRUIgbGjdCxADAMs0/DAmBf2SgAnYODKI2LQ/RP
foJckdq//hP0/Y8/wcK/+wlw8O+h5PjP4H7xCN7+xX/CH/43/w3+7t/9u7gnNna/UwDMFtRm38RF
1wj0DA2iq6UKZz/7EF+e90SIrxcOfXEWKUXNMNtTAdj4FED/wBC+9GrEPz6gxX+4PIx3g434+OYE
rmbpxWUj0Ousd1LuBCifxGOjIxjVjWNGTH9megoTZjG468cxMTWDSYsJesM4psT5k5MWmC0TsIjz
RsXAL6fBAsAwzH4MC4B95ek7AF1dUFdXI/nUKeRcOIvCK44o/OZ9TP3pT5D3wT/FhTNfwfnCN/iP
//5fPbcA6A1G9GnKceX8WTg6OsLh3HkkFteiLicZETFJSI4PR/StLIyZTdDZUwEYHByCxSyenEY9
Miv64XqzBz5JAyhSjWBcLwZ8cf5WH2V41ciBngWAYZj9FhYA+8pGAZCfAjBZxMaqGBNNc/MwP3wC
dVEW8t775zh37BCOHf4Ef/4f/i3+0T/8n/EP/sE/wE9/+lOkpqYqBUBuzSsRJUDuJD89M6OcPzU9
LcZVE4xmCyYmZCbFz0br9cRYJ4+/Y9MCIO+8PPiB9YAEarEwanS1a9DXqUZPhxodrc3QqJuVwfp1
Rh48Qc5TDvxyOTYKgPwFkZ+fZBiGeRMjD4HO4wDYT+QYKI8DII9OKwfkvr4+Jf39A+hub0OLthUt
be1Q1dehtKwMlZVVqKmpUY4B0NHRoZSHjdu8TOQ85Zgnx0KbFQA58MonpGwjW22p71Tk/OQvw0YB
kL8I8kiAMvKXg2EY5k2N3AiS7wSwANg+8jGQG57yMZHvhm+OtrUVre0daG9vF4N95/ceR3nwoGdv
8zKR8+zt7bVdAZCRg7BcALkidisb89u8DLKIbH6rjGEY5k2MHPw3vwYzto0cf+Q7AXJc2s1szHPL
ZRLZlQJgL3m2JDAMw7yp2Xj3k2G2ymspAKYJMbGZaUxPMwzDMAyzFzIjsr0CIDKqNyvH49/q7/AM
wzAMw9hfDCJ9+hkxjm/jHQDL1Bzm52aVt5sYhmEYhrH/zIm81n0ArBN+5u8M4rzNP29k5sEslpeX
lfKw1eUMwzAMw+xMXttOgPPf2flEDOiyXayfVv59WgzWm8fcPJbmp6BVa6Ezz2BBKQHf3sZ6nTll
AbdacIZhGIZhXj2vpwBMzYkBfFIZ9BuK0nD7fh2WFmeh15uwMD2C2OuxaBudxNKC/CiCKAsLC8oR
jJZndQi7Fohi9RAWlxYx/2AKep0eE9Oz4ucF6wEtpmZYAhiGYRjmNee1FIDZhVWkB1/DkeNOOP3x
BzjkFAvLUCOczhzFJRdPfPDuR/AKi0NuRRuGOmuREHMHHheOw90rAu4XL+HzIydxJT4Vk4Ze+F08
hXPuEYgM9sfZi8Ho1MviwANZMAzDMMzrzPYLgF4MznPLSIsKh5OLGxzPeyGrvgPtJRnwd3PBZwcO
wS0kCXn3E3EzXQ1dVxm8PIIQFuwGb/erOH3BD4PjRsSGB+JWfBJiAnxw6NAX+OqoEyrUI3i4srjl
gjMMwzAM83KRf16XBwZq1WqVQ0UPmRe29w7AzPwySmJu4viXX+PkqRPwj7iJ65d94OXsjcOnzuPC
5Su4FZcAl/PeYvD3hn9AHG5d88CJE0fxxSen4erhC68bN3DDPQCeF7zE+afxzUVfqHrGsbK09RGM
GIZhGIZ58cj96uQRIuVh8nt6emAWp4dM1nH8lQvA5INF6LtaUFRSBf34ENQqNUaG+lGUnYVabTd6
25vR0TUAdX0pCgrrMDpmRGtNOWpbOjHc1Y7MzEy0DZmxNDWOspwslNU1o6d/CKaJaWXnwa3uCMMw
DMMwLx55WGD5jYLyOwa6u7uVMrDtAmCeeIDF5WU8eriGxYVFrKwsY2FxEQ8fPcLayhKWllewtCTO
X13Dw4erYiHmsSROr4nrKbcT11tenMfs3DzWxOmHqytYFtfn4M8wDMMw28vGR/FbW7XKlr8c/OW3
DL6WPwFY5McAZ607FDAMwzAMY0dZH5+N4+PK2/4mk1EM/uOYnprC4Ku+A9AtCkC3fg7943MYNDIM
wzAMY2+Re/rLf4fF1r58y19Gnpbn9RjmlHH8lQuA/CRAp2gQskUwDMMwDGP/keO2HMNfqgB4enqX
zz2CuMET5UYMwzAMw+zdWFaB2obWHy8Ap06fqW/UdKK8pgnl1Y0MwzAMw+zh1DW1ITEp7ccLABER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREX3PT37y/wNzkUpmb732QgAAAABJRU5ErkJggg==</Preview>
  <Form>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
+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
/u7+US7/sFcRFHnP5fLP91QxuiCPJ039o+YBDyN/KRESRGzc8/ZdOe5rdjyT6enq3S9Mt5/YhVfk
8m+vF+dPp1bBfTm6neal2q06B2C/d+6Phwv8hG4D2aaeGNn/BLr9cP8ol9/rkU0AdX21k06vp3zp
euDCobaihelPren/hHQ7Vb8ddOp+JwPQS4F/Vp0qK+TNF4e6wVf6Sp+Qbt/dH/Nzhz3BDmcHESL3
ZC7/1edn+WC/20z+j5g//V6/Hcal3/fLs739ge1Rd3uZfgl5u9AuHL3SxTBPQLqI4F+7jjLCuBq0
RsMvQLczIBzzJ1hCAHDIz51DN1avigTMZPCsl/p16Xa8f5TLn+pZM04frUt77fUMF0Z7tXCsKT6n
Qv1j0e18e3qg9CETeji16fx5Z77DUre8+rzydpkfcpvLl/e5fCanXBBj7lvU9z5/seX+5HRkezh9
4580f/rgpWIzlwTnagK22O8wg45MFry6yu/z0e1oi9YhUUBVWJyXy3+F9PLbCS3RPfaLrT994f44
KtfXV2OnACitn71LRXtUkZB0XOH6D6HbQy5/d30lOyhoWdKzK3vPuU6aP9X3M92H3Nc/aP70WB1+
WOlEKTv6O416+qiPYrZ+Ke7/InQ7SsfwkMvXwJO5/F++u9dgbJEX7on4SeOFg26wREKCQg+oZ82f
fn8xiHK7Y9dXptttLl/Rt4DkjXNy+W8lvZ3D6r/rq8Puzf+U+dP7leTrPrl73X6qmO2Tx3WUr9v9
9IPS7T6X39DtuBu9XJ6xN8LzdDv3C2xskgAZ7J7aL+kD0u2t7Oleo6LwlAQgxQv0Vfupsnzu+sdd
Zm/H+deh26Nc/sQsfszlv+8+tB3R+GfNnx69rXK/oz6WJc9GUWdwQVAs2j2ecnK3X+8XoNtdLt9J
XszgXUi3s6CVfI0ez4X9Z8yfHi2HoSYp2B//cObqvue5EOmgOtd3+ph0O+byG7pBLjBbUrZ3k16b
y3/t/KnbqHd6K4n1P2T+9LgHxRy5viIloF9S2f8zLnQO9lFaCp+Ybre5fIaNAUanlAsi7NEeO79z
z/lQj6rbXSs+IN3e1A852rJg7NQAHrkXrz/9yTUIAkqioPanpdsxl79cEwVUBCfm8t9FekdbHJJo
uf8PmD+9tfns3uab/Kk2/3wurBCuBDXW+VR0O+573Orus/mHCqWa4l6Vy3/T+dNs31MUWC0/+9Lz
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
QeKJXnKmi18PYFWLC68BAA==</Form>
  <Code><![CDATA[#################################
######### CONFIGURATION #########
#################################

# LazyAdminKit information
$ApplicationName = "Personec P Update Support Tool - PUST"
$ApplicationVersion = "0.4"
$ApplicationLastUpdate = "2022/11/15"

# Author Information
$AuthorName = "Christian Damberg"
$AuthorEmail = "Christian@damberg.org"
$AuthorBlogName = "www.damberg.org"
$AuthorBlogURL = "http://www.damberg.org"
$AuthorTwitter = "@dambergC"
$AuthorTwitterURL = "http://twitter.com/DambergC"

# Text to show in the Status Bar when the form load
$StatusBarStartUp = "$AuthorName - $AuthorEmail"

$statusbar.Text = $StatusBarStartUp

# Title of the MainForm
$domain = $env:userdomain.ToUpper()
$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"

# Default Error Action
$ErrorActionPreference = "SilentlyContinue"

# Script Paths
$ScriptPath = Split-Path $hostinvocation.MyCommand.path
$ToolsFolder = $ScriptPath + "tools"
$ScriptsFolder = $ScriptPath + "scripts"
$SavePath = $env:userprofile + "\desktop"

#reset Error
$error = ""
$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}

	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	$statusbar.Visible = $true
	
	
}




# ----------------------------
# Create default XML
#If the file does not exist, create it.
if (-not (Test-Path -Path $xmlfile -PathType Leaf))
{
	try
	{
		#skapa xml-dokument
		$xmlWriter = New-Object System.XMl.XmlTextWriter("$ScriptDirectory\PUST.XML", $null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = 1
		$XmlWriter.IndentChar = "`t"
		
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteStartElement("Configuration") # Configuration Startnode
		
		$xmlWriter.WriteElementString("CustomerBigram", "BIGRAM")
		$xmlWriter.WriteElementString("InstansUser", "ViwInstall")
		$xmlWriter.WriteElementString("InstansPassword", "Visma2016!")
		$xmlWriter.WriteElementString("InstallPath", "d:\Visma")
		$xmlWriter.WriteElementString("Sqlserver", "Sqlserver01")
		$xmlWriter.WriteElementString("BigramSEC", "Visma2016!")
		$xmlWriter.WriteEndElement() # Configuration endnode
		$xmlWriter.Flush()
		$xmlWriter.Close()
		
		Write-Log -Level INFO -Message "XML-file for the application - CREATED"
		
	}
	catch
	{
		Write-Log -Level ERROR -Message "Something went wrong creating xml-file"
	}
}
# If the file already exists, show the message and do nothing.
else
{
	Write-Log -Level INFO -Message "Cannot create PUST.XML because it already exists."

}

# ----------------------------
# Read and get data from XML-file

# Get value from xml
[xml]$xmlvalues = Get-Content -Path $xmlfile

$BigramInput.AppendText($xmlvalues.Configuration.CustomerBigram)
$InstansUser.AppendText($xmlvalues.Configuration.InstansUser)
$InstansPassword.AppendText($xmlvalues.Configuration.InstansPassword)
$installpath.AppendText($xmlvalues.Configuration.Installpath)
$SQLServer.AppendText($xmlvalues.Configuration.Sqlserver)

Write-Log -Level INFO -Message "Logged on user: $domainUser"
$LogWindow.AppendText("Cannot create PUST.XML because it already exists.");
$LogWindow.AppendText(" `n");


# ----------------------------
# check user right to start applikation
		If ($members -contains $domainUser)
		{
			Write-Log -Level INFO "$domainUser exists in the group and have right to start applikation"
		}
		Else
		{
			Write-Log -Level INFO "$domainUser Cant start applikation need to be in $group"
				$msg = "You are not authorized to start this application, please contact Visma support"
			if ('OK' -eq [System.Windows.Forms.MessageBox]::Show($msg, 'Warning', 'OK'))
			{
				$PUST.Close()
			}
		}

# ----------------------------
# Check if backupfolder exist
if (-not (Test-Path -Path d:\visma\install\backup))
{
	try
	{
		# try to create backupfolder
		[xml]$xmlvalues = Get-Content -Path $xmlfile
		$InstallPath = $xmlvalues.Configuration.Installpath
		new-item -Path "$InstallPath\install" -Name Backup -ItemType Directory
 		
		Write-Log -Level INFO -Message "$InstallPath\Install\ backupfolder - CREATED"
	}
	catch
	{
		Write-Log -Level ERROR -Message "Something went wrong creating backupfolder"
	}
}
# If the file already exists, show the message and do nothing.
else
{
	Write-Log -Level INFO -Message "Backupfolder exist"
}

# ----------------------------
# Get folders in backup
		[xml]$xmlvalues = Get-Content -Path $xmlfile
		$InstallPath = $xmlvalues.Configuration.Installpath
		$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name

		Update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders

# ----------------------------
# Button to close application
$buttonExit_Click={
	#TODO: Place custom script here
	$PUST.Close()
}
# ----------------------------
# Button to save configuration
$buttonSaveConfiguration_Click={
	#TODO: Place custom script here
	[XML]$xmlsave = Get-Content -Path $xmlfile
	
	$bigramtext = $BigramInput.Text
	$InstansUserText = $InstansUser.Text
	$SQLServerText = $SQLServer.text
	$InstallPath
	
	$xmlsave.Configuration.CustomerBigram = "$bigramtext"
	$xmlsave.Configuration.InstansUser = "$InstansUserText"
	$xmlsave.Configuration.Sqlserver = "$SQLServerText"
	$xmlsave.Configuration.InstallPath = "$SQLServerText"
	$xmlsave.Save($xmlfile)
	Write-Log -Level INFO -Message "Configurationfile updated"
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText("Configuration saved.");
	$LogWindow.AppendText(" `n");
}
# ----------------------------
# Button to transfer to clipboard
$BigramToClipboard_Click={
	#TODO: Place custom script here
	$copyText = $BigramInput.Text.Trim()
	
	[System.Windows.Forms.Clipboard]::SetText($copyText)
	
	if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
		[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
	{
		$statusbar.Text = "$copyText Copied to clipboard."
		Write-Log -Level INFO -Message "Copied $BigramInput to clipboard"
		$statusbar.Visible = $true
		Start-Sleep -Seconds 2
		$statusbar.Visible = $false
	}
}

# ----------------------------
# Button to transfer to clipboard
$InstansUserToClipboard_Click={
	#TODO: Place custom script here
	$copyText = $InstansUser.Text.Trim()
	
	[System.Windows.Forms.Clipboard]::SetText($copyText)
	
	if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
		[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
	{
		$statusbar.Text = "$copyText Copied to clipboard."
		$statusbar.Visible = $true
		Start-Sleep -Seconds 2
		$statusbar.Visible = $false
	}
}

# ----------------------------
# Button to transfer to clipboard
$InstansPasswordToClipboard_Click={
	#TODO: Place custom script here
	$copyText = $InstansPassword.Text.Trim()
	
	[System.Windows.Forms.Clipboard]::SetText($copyText)
	
	if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
		[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
	{
		$statusbar.Text = "$copyText Copied to clipboard."
		$statusbar.Visible = $true
		Start-Sleep -Seconds 2
		$statusbar.Visible = $false
	}
}

# ----------------------------
# Button to zip folder
$buttonCreateZip_Click={
	#TODO: Place custom script here
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	
	$countfiles = Get-ChildItem "$InstallPath\install\backup\$selected_Folder" -Recurse
	
	$resultcountfiles = $countfiles.count
	
	$LogWindow.AppendText("Number of files $resultcountfiles ");
	$LogWindow.AppendText(" `n");
	
	$progressbar1.Maximum = $countfiles.Count
	$progressbar1.Step = 1
	$progressbar1.Value = 0
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Vill du skapa zip fil av vald mapp? Mappen kommer raderas när zip-filen är skapad", 'Skapa zipfil',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		#Start-Job (Compress-7Zip -ArchiveFileName "$selected_Folder.zip" -Path "$InstallPath\install\backup\$selected_Folder" -OutputPath "$InstallPath\install\backup" -Format SevenZip -CompressionLevel FAST -CompressionMethod default)
		
			foreach ($file in $countfiles)
			{
				$progressbar1.PerformStep()
				Start-Sleep -Milliseconds 0.6
			}
		
		#Remove-Item -Path "$InstallPath\install\backup\$selected_Folder" -Recurse -Force
		
	
	}
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders
	Start-Sleep -Seconds 3	
	$progressbar1.Value = 0

}

# ----------------------------
# Monitor logfile

$LogWindow.Text = 'd:\Visma\Install\pust.log'
$buttonAbout_Click = {
	
	Show-About_psf
	
	$LogWindow.AppendText("Logged on user: $domainUser")
}
# ----------------------------
# Button to rename folder
$buttonRenameFolder_Click={
	#TODO: Place custom script here
	
	
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders
	
}
# ----------------------------
# Button to create folder
$buttonCreateFolder_Click={
	#TODO: Place custom script here
	
	Show-Create-Folder_psf

}

$buttonDelete_Click={
	#TODO: Place custom script here
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("Delete $selected_Folder from backup-folder");
	$LogWindow.AppendText(" `n");
	
	
	
	Remove-Item -Path "$InstallPath\install\backup\$selected_Folder" -Recurse -Force
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders
	$LogWindow.AppendText("Done");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
}

$buttonOpen_Click={
	#TODO: Place custom script here
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	explorer "$InstallPath\install\backup\$selected_Folder\"
	
}


$buttonBackup_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show('Har du avkrypterat alla filer i PIN?', 'Avkryptering innan backup...',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$selected_Folder = $BackupFolder.SelectedCells[0].Value
		$destinationWWW = "$InstallPath\install\backup\$selected_Folder\wwwroot"
		$sourceWWW = "d:\Visma\Wwwroot"
		
		$destinationApp = "$InstallPath\install\backup\$selected_Folder\Programs"
		$sourceApp = "d:\Visma\Programs"
		$LogWindow.AppendText("Start with backup of WWW");
		$LogWindow.AppendText(" `n");
		$LogWindow.AppendText("-------------------------------");
		$LogWindow.AppendText(" `n");
		robocopy $sourceWWW $destinationWWW /e /xf *.log, *.svclog
		$LogWindow.AppendText("Start with backup of Programs");
		$LogWindow.AppendText(" `n");
		$LogWindow.AppendText("-------------------------------");
		$LogWindow.AppendText(" `n");
		robocopy $sourceApp $destinationApp /e /xf *.log
		$LogWindow.AppendText("Done with backup");
		$LogWindow.AppendText(" `n");
		$LogWindow.AppendText("-------------------------------");
	}
}

$Tab_SelectedIndexChanged = {
	
	# Get folders in backup
	[xml]$xmlvalues = Get-Content -Path $xmlfile
	$InstallPath = $xmlvalues.Configuration.Installpath
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	
	$treeview1.Nodes.Add('d:\Visma','D:\Visma')
	
	$treeview1.ExpandAll()
	
	Update-DataGridView -DataGridView $WebconfigGridview -Item $ExistingBackupFolders
	
	
}

$buttonCollectValues_Click={
	#TODO: Place custom script here
	$PSTidUser_box.Text = ""
	$PSTidpwd_box.text = ""
	$BatchUser_box.Text = ""
	$BatchPWD_box.Text = ""
	$UseSSO_box.text = ""
	$SSOMethod_BOX.text = ""
	$BefolkAGFile_BOX.Text = ""
	$BefolkAGName_BOX.Text = ""
	
	$bigramoutput = $BigramInput.Text
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	
	$pstidFile = Get-IniFile "$InstallPath\install\backup\$selected_Folder\programs\$bigramoutput\ppp\Personec_p\pstid.ini"
	$pstiduser = $PSTIDfile.styr.NeptuneUser
	$pstidpwd = $PSTIDfile.styr.NeptunePassword
	
	[XML]$batch = Get-Content "$InstallPath\Install\backup\$selected_Folder\Programs\$bigramoutput\PPP\Personec_P\batch.config"
	$batchuser = $batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
	$batchpwd = $batch.configuration.appsettings.add.where{ $_.key -eq 'syspassword' }.value
	
	[XML]$UseSSO = Get-Content "$InstallPath\Install\backup\$selected_Folder\Wwwroot\$bigramoutput\$bigramoutput\Login\Web.config"
	$SSOMethod = $UseSSO.configuration.appsettings.add.where{ $_.key -eq 'SingleSignOnMethod' }.value
	$SSOValue = $UseSSO.configuration.appsettings.add.where{ $_.key -eq 'UseSSo' }.value
	
	
	[XML]$PAG = Get-Content "$InstallPath\Install\backup\$selected_Folder\Wwwroot\$bigramoutput\PPP\Personec_AG\Web.config"
	$PAGBefolkCfgFilename = $PAG.configuration.appsettings.add.where{ $_.key -eq 'BefolkningsregisterConfigFileName' }.value
	$PAGBefolkCfgname = $PAG.configuration.appsettings.add.where{ $_.key -eq 'BefolkningsregisterConfigName' }.value
	
	
	$SSOMethod_BOX.AppendText($SSOMethod)
	$UseSSO_box.AppendText($SSOValue)
	
	$PSTidUser_box.AppendText($pstiduser)
	$PSTidpwd_box.AppendText($pstidpwd)
	
	$BatchUser_box.AppendText($batchuser)
	$BatchPWD_box.AppendText($batchpwd)
	
	$BefolkAGFile_BOX.AppendText($PAGBefolkCfgFilename)
	$BefolkAGName_BOX.AppendText($PAGBefolkCfgname)
	
	$NeptunePwd = $PSTID.styr.neptunepassword
	
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("Reading settings form ini- and configfiles");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember) 
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



#endregion

$buttonInventorySystem_Click={
	#TODO: Place custom script here
	$OSName_BOX.Text = ""
	$Uptime_BOX.Text = ""
	$BootTime_BOX.Text = ""
	$Diskspace_BOX.Text = ""
	$OSName_BOX.AppendText((Get-WmiObject Win32_OperatingSystem).Caption)
	
	# Get uptime och boottime
	$uptime_boottime = get-UptimeCalc
	
	$Uptime_BOX.AppendText($uptime_boottime.uptime)
	$BootTime_BOX.AppendText($uptime_boottime.lastbootUptime)
	
	# diskspace
	$result = Get-DiskDetails -ComputerName localhost | Out-String
	
	Add-RichTextBox -text $result
	
}




$treeview1_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
	
	$node = $_.Node
	Get-ChildItem $node.Text -Directory |
	ForEach-Object{
		$node.Nodes.Add($_.FullName, $_.FullName)
	}
	$node.Expand()
	
	$state = $_.Node.Checked
	$_.Node.Nodes | %{ $_.Checked = $state }
}



$CompareWebConfig_Click={
	#TODO: Place custom script here
	
	$bigramoutput = $BigramInput.Text
	
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	
	$WebConfigPROD = get-childitem "$InstallPath\wwwroot\$bigramoutput\*" -recurse | where { $_.name -eq "web.config" }
	$WebConfigBackup = get-childitem "$InstallPath\install\backup\$selected_Folder\wwwroot\$bigramoutput\*" -recurse | where { $_.name -eq "web.config" }
	
	$inifilesPROD = Get-ChildItem -Path "$InstallPath\programs\$bigramoutput" -Filter *.ini -Recurse
	$inifilesBackup = Get-ChildItem -Path "$InstallPath\install\backup\$selected_Folder\programs\$bigramoutput\*" -Filter *.ini -Recurse
	
	$filepathPROD = @()
	$filepathBackup = @()
	
	foreach ($WebConfigfile in $WebConfigPROD)
	{
		$filepathPROD += $WebConfigfile
	}
	
	foreach ($inifile in $inifilesPROD)
	{
		$filepathPROD += $inifile
	}
	
	
	foreach ($WebConfigfile in $WebConfigBackup)
	{
		$filepathBackup += $WebConfigfile
	}
	
	foreach ($inifile in $inifilesBackup)
	{
		$filepathBackup += $inifile
	}
	
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("Comparing Webconfig");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText($filehashPROD);
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText($filehashbackup);
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
		
		foreach ($webconfigP in $WebConfigPROD)
		{
			$WebConfigPRODList.Items.Add($filepathPROD.FullName)
		}
		
		foreach ($webconfigB in $WebConfigBackup)
		{
			$WebConfigBackupList.Items.Add($webconfigB.FullName)
		}
		
		

	
	
	
}

$buttonCompareFilehash_Click={
	#TODO: Place custom script here
	

	
	
	$filehashPROD = get-filehash -Path $WebConfigPRODList.Text
	$filehashbackup = Get-FileHash -Path $WebConfigBackupList.text

	
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("Comparing Webconfig");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText($filehashPROD);
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText($filehashbackup);
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
	$LogWindow.ScrollToCaret()
	
	if ($filehashPROD.hash -eq $filehashbackup.hash )
	{
		$WebConfigCompareResult.ForeColor = 'Green'
		$WebConfigCompareResult.AppendText('Compliant')

	}
	else
	{
		$WebConfigCompareResult.ForeColor = 'red'
		$WebConfigCompareResult.AppendText('Noncompliant')

	}
	
	
	
	
	
	
	
}


$buttonOpenNotepadPlusPlus_Click={
	#TODO: Place custom script here
	
	& "C:\Program Files\Notepad++\notepad++.exe" $WebConfigPRODList.Text $WebConfigBackupList.text
}

$buttonChangeInstallPath_Click={
	#TODO: Place custom script here
	
	$folderbrowsermoderndialog1.ShowDialog()
	$textbox1.Clear()
	$label1.Text = $folderbrowsermoderndialog1.SelectedPath
	$textbox1.AppendText($folderbrowsermoderndialog1.SelectedPath)
}

$buttonGetDatabases_Click={
	#TODO: Place custom script here
	
	$cred | Import-Clixml -Path .\user.cred
	
	$checkedlistbox1.CheckedItems | % $checkedlistbox1.Items.Remove($_)

	$databases = Get-DbaDatabase -SqlInstance localhost -SqlCredential $Cred
	
	
	foreach ($database in $databases)
	
	{
		$checkedlistbox1.Items.Add($database)	
	}
}

$buttonCreateHashfile_Click={
	#TODO: Place custom script here
	
	$cred = Get-Credential -UserName 'viwinstall' -Message 'Password for viwinstall-account'
	
	$cred | Export-Clixml -Path .\user.cred 
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>Microsoft.Web.WebView2.Core, Version=1.0.1293.44, Culture=neutral, PublicKeyToken=2a8ab48044d2601e|..\Powershell_script\UpdateStatus\bin\x64\UpdateStatus\Microsoft.Web.WebView2.Core.dll</Assembly>
    <Assembly>Microsoft.Web.WebView2.WinForms, Version=1.0.1293.44, Culture=neutral, PublicKeyToken=2a8ab48044d2601e|..\Powershell_script\UpdateStatus\bin\x64\UpdateStatus\Microsoft.Web.WebView2.WinForms.dll</Assembly>
  </Assemblies>
</File>