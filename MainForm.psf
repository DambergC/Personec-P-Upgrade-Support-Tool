<File version="3.2">
  <FileID>89f6e73f-32cc-406d-b4bf-e11639642cb8</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFd+SURBVHhe7d0HcFx5gh72dUm6Ovskn2y5dHZJ
Llmy1yeXbPkk2TrpJKuuZOnudPLe3u7e7s7s7OwEhplhTiBBEiSRARIZIEAABAEQAAkikCByzhno
bnRADo3QuRs5B5Kf//8HgASH4OzMLMkh0d9v6hs0ul+/9zqw/99rdL/3PSIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIvqW
wn77t3+r5kc/+lFNYGBwjZ9fYI0vwzAMwzDvVPz8g2ouX7lS879+//s1YmyX+Wq/9Vu/1XHq9FnU
d/Sge2yKYRiGYZh3MD3j0zCMOnG/oAz/7A/+AFvD/Mv98Id/WVPX3o22fhtq1MMMwzAMw7yTGUKt
ZgS60Wlcv3Hz1xeAoKBrNf3mWdR2jaBea2QYhmEY5h1OR78dNU2dv74AyL/7D1rmlSs16kafjziv
od+Chp4JcfpLlzEMwzDMO5wm/ZiShl0u+zppNmxev0n8/PbzGFfmIX/udvnXiVy+nMf276pBB8pr
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
eR5D1nmM2BiGYRiGedsiP+kvf46KrX35lr+MPC3P67fMK+P4ty4A8psAPaJByBbBMAzDMMzbHzlu
yzH8GxWAwMDg2vlHEFd4olyJYRiGYZh3N841oLld9+sLwKnTZ1o7ND2obepEbWMHwzAMwzDvcFo6
9cjMuv/rCwARERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERG94Hvf+/8BNV2Y5C/cPS0AAAAASUVORK5CYII=</Preview>
  <Form>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
z9Nz/ZKtAQA=</Form>
  <Code><![CDATA[#################################
######### CONFIGURATION #########
#################################

# LazyAdminKit information
$ApplicationName = "Personec P Update Support Tool - PUST"
$ApplicationVersion = "0.4"
$ApplicationLastUpdate = "2022/11/15"

# Author Information
$AuthorName = "Christian Damberg"
$AuthorEmail = "Christian@damberg.org"
$AuthorBlogName = "www.damberg.org"
$AuthorBlogURL = "http://www.damberg.org"
$AuthorTwitter = "@dambergC"
$AuthorTwitterURL = "http://twitter.com/DambergC"

# Text to show in the Status Bar when the form load
$StatusBarStartUp = "$AuthorName - $AuthorEmail"

$statusbar.Text = $StatusBarStartUp

# Title of the MainForm
$domain = $env:userdomain.ToUpper()
$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"

# Default Error Action
$ErrorActionPreference = "SilentlyContinue"

# Script Paths
$ScriptPath = Split-Path $hostinvocation.MyCommand.path
$ToolsFolder = $ScriptPath + "tools"
$ScriptsFolder = $ScriptPath + "scripts"
$SavePath = $env:userprofile + "\desktop"

#reset Error
$error = ""
$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}

	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	$statusbar.Visible = $true
	
	
}




# ----------------------------
# Create default XML
#If the file does not exist, create it.
if (-not (Test-Path -Path $xmlfile -PathType Leaf))
{
	try
	{
		#skapa xml-dokument
		$xmlWriter = New-Object System.XMl.XmlTextWriter("$ScriptDirectory\PUST.XML", $null)
		$xmlWriter.Formatting = 'Indented'
		$xmlWriter.Indentation = 1
		$XmlWriter.IndentChar = "`t"
		
		$xmlWriter.WriteStartDocument()
		
		$xmlWriter.WriteStartElement("Configuration") # Configuration Startnode
		
		$xmlWriter.WriteElementString("CustomerBigram", "BIGRAM")
		$xmlWriter.WriteElementString("InstansUser", "ViwInstall")
		$xmlWriter.WriteElementString("InstansPassword", "Visma2016!")
		$xmlWriter.WriteElementString("InstallPath", "d:\Visma")
		$xmlWriter.WriteEndElement() # Configuration endnode
		$xmlWriter.Flush()
		$xmlWriter.Close()
		
		Write-Log -Level INFO -Message "XML-file for the application - CREATED"
		
	}
	catch
	{
		Write-Log -Level ERROR -Message "Something went wrong creating xml-file"
	}
}
# If the file already exists, show the message and do nothing.
else
{
	Write-Log -Level INFO -Message "Cannot create PUST.XML because it already exists."

}

# ----------------------------
# Read and get data from XML-file

# Get value from xml
[xml]$xmlvalues = Get-Content -Path $xmlfile

$BigramInput.AppendText($xmlvalues.Configuration.CustomerBigram)
$InstansUser.AppendText($xmlvalues.Configuration.InstansUser)
$InstansPassword.AppendText($xmlvalues.Configuration.InstansPassword)
$installpath.AppendText($xmlvalues.Configuration.Installpath)

Write-Log -Level INFO -Message "Logged on user: $domainUser"
$LogWindow.AppendText("Cannot create PUST.XML because it already exists.");
$LogWindow.AppendText(" `n");


# ----------------------------
# check user right to start applikation
		If ($members -contains $domainUser)
		{
			Write-Log -Level INFO "$domainUser exists in the group and have right to start applikation"
		}
		Else
		{
			Write-Log -Level INFO "$domainUser Cant start applikation need to be in $group"
				$msg = "You are not authorized to start this application, please contact Visma support"
			if ('OK' -eq [System.Windows.Forms.MessageBox]::Show($msg, 'Warning', 'OK'))
			{
				$PUST.Close()
			}
		}

# ----------------------------
# Check if backupfolder exist
if (-not (Test-Path -Path d:\visma\install\backup))
{
	try
	{
		# try to create backupfolder
		[xml]$xmlvalues = Get-Content -Path $xmlfile
		$InstallPath = $xmlvalues.Configuration.Installpath
		new-item -Path "$InstallPath\install" -Name Backup -ItemType Directory
 		
		Write-Log -Level INFO -Message "$InstallPath\Install\ backupfolder - CREATED"
	}
	catch
	{
		Write-Log -Level ERROR -Message "Something went wrong creating backupfolder"
	}
}
# If the file already exists, show the message and do nothing.
else
{
	Write-Log -Level INFO -Message "Backupfolder exist"
}

# ----------------------------
# Get folders in backup
		[xml]$xmlvalues = Get-Content -Path $xmlfile
		$InstallPath = $xmlvalues.Configuration.Installpath
		$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name

		Update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders

# ----------------------------
# Button to close application
$buttonExit_Click={
	#TODO: Place custom script here
	$PUST.Close()
}
# ----------------------------
# Button to save configuration
$buttonSaveConfiguration_Click={
	#TODO: Place custom script here
	[XML]$xmlsave = Get-Content -Path $xmlfile
	
	$bigramtext = $BigramInput.Text
	
	$xmlsave.Configuration.CustomerBigram = "$bigramtext"
	$xmlsave.Save($xmlfile)
	Write-Log -Level INFO -Message "Configurationfile updated"
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText("Configuration saved.");
	$LogWindow.AppendText(" `n");
}

# ----------------------------
# Button to transfer to clipboard
$BigramToClipboard_Click={
	#TODO: Place custom script here
	$copyText = $BigramInput.Text.Trim()
	
	[System.Windows.Forms.Clipboard]::SetText($copyText)
	
	if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
		[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
	{
		$statusbar.Text = "$copyText Copied to clipboard."
		Write-Log -Level INFO -Message "Copied $BigramInput to clipboard"
		$statusbar.Visible = $true
		Start-Sleep -Seconds 2
		$statusbar.Visible = $false
	}
}

# ----------------------------
# Button to transfer to clipboard
$InstansUserToClipboard_Click={
	#TODO: Place custom script here
	$copyText = $InstansUser.Text.Trim()
	
	[System.Windows.Forms.Clipboard]::SetText($copyText)
	
	if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
		[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
	{
		$statusbar.Text = "$copyText Copied to clipboard."
		$statusbar.Visible = $true
		Start-Sleep -Seconds 2
		$statusbar.Visible = $false
	}
}

# ----------------------------
# Button to transfer to clipboard
$InstansPasswordToClipboard_Click={
	#TODO: Place custom script here
	$copyText = $InstansPassword.Text.Trim()
	
	[System.Windows.Forms.Clipboard]::SetText($copyText)
	
	if ([System.Windows.Forms.Clipboard]::ContainsText() -AND
		[System.Windows.Forms.Clipboard]::GetText() -eq $copyText)
	{
		$statusbar.Text = "$copyText Copied to clipboard."
		$statusbar.Visible = $true
		Start-Sleep -Seconds 2
		$statusbar.Visible = $false
	}
}

# ----------------------------
# Button to zip folder
$buttonCreateZip_Click={
	#TODO: Place custom script here
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	
	$countfiles = Get-ChildItem "$InstallPath\install\backup\$selected_Folder" -Recurse
	
	$resultcountfiles = $countfiles.count
	
	$LogWindow.AppendText("Number of files $resultcountfiles ");
	$LogWindow.AppendText(" `n");
	
	$progressbar1.Maximum = $countfiles.Count
	$progressbar1.Step = 1
	$progressbar1.Value = 0
	
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show("Vill du skapa zip fil av vald mapp? Mappen kommer raderas när zip-filen är skapad", 'Skapa zipfil',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		#Start-Job (Compress-7Zip -ArchiveFileName "$selected_Folder.zip" -Path "$InstallPath\install\backup\$selected_Folder" -OutputPath "$InstallPath\install\backup" -Format SevenZip -CompressionLevel FAST -CompressionMethod default)
		
			foreach ($file in $countfiles)
			{
				$progressbar1.PerformStep()
				Start-Sleep -Milliseconds 0.6
			}
		
		#Remove-Item -Path "$InstallPath\install\backup\$selected_Folder" -Recurse -Force
		
	
	}
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders
	Start-Sleep -Seconds 3	
	$progressbar1.Value = 0

}

# ----------------------------
# Monitor logfile

$LogWindow.Text = 'd:\Visma\Install\pust.log'
$buttonAbout_Click = {
	
	Show-About_psf
	
	$LogWindow.AppendText("Logged on user: $domainUser")
}
# ----------------------------
# Button to rename folder
$buttonRenameFolder_Click={
	#TODO: Place custom script here
	
	
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders
	
}
# ----------------------------
# Button to create folder
$buttonCreateFolder_Click={
	#TODO: Place custom script here
	
	Show-Create-Folder_psf

}

$buttonDelete_Click={
	#TODO: Place custom script here
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("Delete $selected_Folder from backup-folder");
	$LogWindow.AppendText(" `n");
	Remove-Item -Path "$InstallPath\install\backup\$selected_Folder" -Recurse -Force
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	update-DataGridView -DataGridView $BackupFolder -Item $ExistingBackupFolders
	$LogWindow.AppendText("Done");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
}

$buttonOpen_Click={
	#TODO: Place custom script here
	$selected_Folder = $BackupFolder.SelectedCells[0].Value
	explorer "$InstallPath\install\backup\$selected_Folder\"
	
}


$buttonBackup_Click={
	#TODO: Place custom script here
	#Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
	if([System.Windows.Forms.MessageBox]::Show('Har du avkrypterat alla filer i PIN?', 'Avkryptering innan backup...',[System.Windows.Forms.MessageBoxButtons]::YesNo) -eq 'Yes')
	{
		
		$selected_Folder = $BackupFolder.SelectedCells[0].Value
		$destinationWWW = "$InstallPath\install\backup\$selected_Folder\wwwroot"
		$sourceWWW = "d:\Visma\Wwwroot"
		
		$destinationApp = "$InstallPath\install\backup\$selected_Folder\Programs"
		$sourceApp = "d:\Visma\Programs"
		$LogWindow.AppendText("Start with backup of WWW");
		$LogWindow.AppendText(" `n");
		$LogWindow.AppendText("-------------------------------");
		$LogWindow.AppendText(" `n");
		robocopy $sourceWWW $destinationWWW /e /xf *.log, *.svclog
		$LogWindow.AppendText("Start with backup of Programs");
		$LogWindow.AppendText(" `n");
		$LogWindow.AppendText("-------------------------------");
		$LogWindow.AppendText(" `n");
		robocopy $sourceApp $destinationApp /e /xf *.log
		$LogWindow.AppendText("Done with backup");
		$LogWindow.AppendText(" `n");
		$LogWindow.AppendText("-------------------------------");
	}
}

$Tab_SelectedIndexChanged = {
	
	# Get folders in backup
	[xml]$xmlvalues = Get-Content -Path $xmlfile
	$InstallPath = $xmlvalues.Configuration.Installpath
	$ExistingBackupFolders = Get-ChildItem -Path "$InstallPath\Install\backup" | Select-Object Name
	
	$treeview1.Nodes.Add('d:\Visma','D:\Visma')
	
	$treeview1.ExpandAll()
	
	Update-DataGridView -DataGridView $WebconfigGridview -Item $ExistingBackupFolders
	
}

$buttonCollectValues_Click={
	#TODO: Place custom script here
	$PSTidUser_box.Text = ""
	$PSTidpwd_box.text = ""
	$BatchUser_box.Text = ""
	$BatchPWD_box.Text = ""
	$UseSSO_box.text = ""
	$SSOMethod_BOX.text = ""
	$BefolkAGFile_BOX.Text = ""
	$BefolkAGName_BOX.Text = ""
	
	$bigramoutput = $BigramInput.Text
	$selected_Folder = $WebconfigGridview.SelectedCells[0].Value
	
	$pstidFile = Get-IniFile "$InstallPath\install\backup\$selected_Folder\programs\$bigramoutput\ppp\Personec_p\pstid.ini"
	$pstiduser = $PSTIDfile.styr.NeptuneUser
	$pstidpwd = $PSTIDfile.styr.NeptunePassword
	
	[XML]$batch = Get-Content "$InstallPath\Install\backup\$selected_Folder\Programs\$bigramoutput\PPP\Personec_P\batch.config"
	$batchuser = $batch.configuration.appsettings.add.where{ $_.key -eq 'sysuser' }.value
	$batchpwd = $batch.configuration.appsettings.add.where{ $_.key -eq 'syspassword' }.value
	
	[XML]$UseSSO = Get-Content "$InstallPath\Install\backup\$selected_Folder\Wwwroot\$bigramoutput\$bigramoutput\Login\Web.config"
	$SSOMethod = $UseSSO.configuration.appsettings.add.where{ $_.key -eq 'SingleSignOnMethod' }.value
	$SSOValue = $UseSSO.configuration.appsettings.add.where{ $_.key -eq 'UseSSo' }.value
	
	[XML]$PAG = Get-Content "$InstallPath\Install\backup\$selected_Folder\Wwwroot\$bigramoutput\PPP\Personec_AG\Web.config"
	$PAGBefolkCfgFilename = $PAG.configuration.appsettings.add.where{ $_.key -eq 'BefolkningsregisterConfigFileName' }.value
	$PAGBefolkCfgname = $PAG.configuration.appsettings.add.where{ $_.key -eq 'BefolkningsregisterConfigName' }.value
	
	
	$SSOMethod_BOX.AppendText($SSOMethod)
	$UseSSO_box.AppendText($SSOValue)
	
	$PSTidUser_box.AppendText($pstiduser)
	$PSTidpwd_box.AppendText($pstidpwd)
	
	$BatchUser_box.AppendText($batchuser)
	$BatchPWD_box.AppendText($batchpwd)
	
	$BefolkAGFile_BOX.AppendText($PAGBefolkCfgFilename)
	$BefolkAGName_BOX.AppendText($PAGBefolkCfgname)
	
	$NeptunePwd = $PSTID.styr.neptunepassword
	
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("Reading settings form ini- and configfiles");
	$LogWindow.AppendText(" `n");
	$LogWindow.AppendText("-------------------------------");
	$LogWindow.AppendText(" `n");
}

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}



function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}



#endregion

$buttonInventorySystem_Click={
	#TODO: Place custom script here
	$OSName_BOX.Text = ""
	$Uptime_BOX.Text = ""
	$BootTime_BOX.Text = ""
	$Diskspace_BOX.Text = ""
	$OSName_BOX.AppendText((Get-WmiObject Win32_OperatingSystem).Caption)
	
	# Get uptime och boottime
	$uptime_boottime = get-UptimeCalc
	
	$Uptime_BOX.AppendText($uptime_boottime.uptime)
	$BootTime_BOX.AppendText($uptime_boottime.lastbootUptime)
	
	# diskspace
	$DiskDetails = Get-DiskSpace
	
	$richtextbox1.AppendText($DiskDetails)
	
}




$treeview1_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
	#TODO: Place custom script here
	
	$node = $_.Node
	Get-ChildItem $node.Text -Directory |
	ForEach-Object{
		$node.Nodes.Add($_.FullName, $_.FullName)
	}
	$node.Expand()
	
	$state = $_.Node.Checked
	$_.Node.Nodes | %{ $_.Checked = $state }
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>